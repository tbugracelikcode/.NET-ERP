@page "/"

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IUsersAppService UsersAppService
@inject AppService AppService
@inject IEmployeesAppService EmployeesAppService

<div class="TSIArea">

   
    <ul class="TSICircles">
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
    </ul>

</div>

<SfCard class="TSILoginPageCard">
    <CardContent>
        <DxGridLayout CssClass="TSIGridLayout">

            <Rows>
                <DxGridLayoutRow Height="60%" />
                <DxGridLayoutRow Height="60%" />
                <DxGridLayoutRow Height="33%" />
            </Rows>

            <Columns>
                <DxGridLayoutColumn Width="10%" />
                <DxGridLayoutColumn Width="80%" />
                <DxGridLayoutColumn Width="10%" />
            </Columns>

            <Items>
                <br />
                <center>
                    <img src="tsi.png" style=" border-radius: 0% !important; width: 425px;height: 135px; margin-left: 0% !important;position: relative;" />
                </center>
                <br />
                <br />
                <br />
                <br />
                <DxGridLayoutItem Row="0" Column="1">
                    <Template>
                        <br />
                        <SfTextBox CssClass="TSI40pxHeightButton" @ref="@EmployeesButtonEdit" Created="@EmployeesCodeOnCreateIcon" @bind-Value="User" ShowClearButton=true ValueChange="EmployeesOnValueChange"></SfTextBox>
                    </Template>
                </DxGridLayoutItem>


                <DxGridLayoutItem Row="1" Column="1">
                    <Template>
                        <SfTextBox CssClass="TSI40pxHeightButton" @bind-Value="Password" Type="Syncfusion.Blazor.Inputs.InputType.Password"></SfTextBox>
                    </Template>
                </DxGridLayoutItem>


                <DxGridLayoutItem Row="2" Column="1">
                    <Template>
                        <center><SfButton CssClass="TSILoginButton" OnClick="OnLoginButtonClicked"><SfIcon Size="IconSize.Large" Name="IconName.Export"></SfIcon>&nbsp;Giriş</SfButton></center>
                    </Template>
                </DxGridLayoutItem>

            </Items>
        </DxGridLayout>
    </CardContent>
    <CardFooter>
    </CardFooter>
</SfCard>


@if (SelectEmployeesPopupVisible)
{
    <DxPopup @bind-Visible="SelectEmployeesPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="Personeller"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards">

                                <CardContent>
                                    <SfGrid ID="EmployeesGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@EmployeesList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@EmployeesDoubleClickHandler" TValue="ListEmployeesDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListEmployeesDto.Code) HeaderText="PERSONEL KODU" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListEmployeesDto.Name) HeaderText="PERSONEL ADI" TextAlign="TextAlign.Center" Width="120" Context="logincontext">
                                                <Template>
                                                    @{
                                                        string userNameSurname = (logincontext as ListEmployeesDto).Name + " " + (logincontext as ListEmployeesDto).Surname;
                                                    }
                                                    @userNameSurname
                                                </Template>
                                            </GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}





@code {

    string User = string.Empty;
    string Password = string.Empty;
    // bool vispopup;
    public string[] MenuItems = new string[] { "Group", "Ungroup", "ColumnChooser", "Filter" };
    List<ListEmployeesDto> EmployeesList = new List<ListEmployeesDto>();

    #region Yorum
    // private Task<IJSObjectReference> _module;

    // public Task<IJSObjectReference> Module1 => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "/login/js/jquery-3.5.0.min.js").AsTask();
    // public Task<IJSObjectReference> Module2 => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "/login/js/bootstrap.min.js").AsTask();
    // public Task<IJSObjectReference> Module3 => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "/login/js/imagesloaded.pkgd.min.js").AsTask();
    // public Task<IJSObjectReference> Module4 => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "/login/js/validator.min.js").AsTask();
    // public Task<IJSObjectReference> Module5 => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "/login/js/main.js").AsTask();

    // protected async override Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         // await JSRuntime.InvokeAsync<IJSObjectReference>(identifier: "import", "./login/js/jquery-3.5.0.min.js");
    //         // await JSRuntime.InvokeAsync<IJSObjectReference>(identifier: "import", "./login/js/bootstrap.min.js");
    //         // await JSRuntime.InvokeAsync<IJSObjectReference>(identifier: "import", "./login/js/imagesloaded.pkgd.min.js");
    //         // await JSRuntime.InvokeAsync<IJSObjectReference>(identifier: "import", "./login/js/validator.min.js");
    //         // await JSRuntime.InvokeAsync<IJSObjectReference>(identifier: "import", "./login/js/main.js");
    //     }
    // }

    // void LoginPopupClosing(PopupClosingEventArgs args)
    // {
    //     vispopup = false;
    // }
    #endregion



    private async void OnLoginButtonClicked()
    {
        var loginnedUser = (await UsersAppService.GetAsyncByUserNameAndPassword(User, Password)).Data;

        // if (loginnedUser != null)
        // {
        //     VisibleSpinner = true;

        //     //LoginedUserService.UserId = Guid.Parse("d71be8fe-07ce-4ff0-940f-f6d778c16181");

        //      LoginedUserService.UserId = loginnedUser.Id;

        //     AppService.EmployeeID = loginnedUser.Id;

        //     LoginedUserService.VersionTableId = Guid.Parse("8A5F698D-D632-4314-A0C4-02E496FEB6CD");

        #region Yetki

        // var permissions = (await UserPermissionsAppService.GetListAsyncByUserId(loginnedUser.Id)).Data;

        // var menus = (typeof(NavBarPermissionsModel)).GetProperties();

        // foreach (var item in permissions)
        // {
        //     var menu = menus.Where(t => t.Name == item.MenuName).FirstOrDefault();

        //     if (menu != null)
        //     {
        //         menu.SetValue(menu, item.IsUserPermitted);
        //     }
        // }

        // NavigationManager.NavigateTo("/home");

        #endregion
        // }
        // else
        // {
        //     vispopup = true;
        // }

        //if (User == "admin" && Password == "admin")
        //{
        

        //    LoginedUserService.UserId = Guid.Parse("d71be8fe-07ce-4ff0-940f-f6d778c16181");

        //    LoginedUserService.VersionTableId = Guid.Parse("8A5F698D-D632-4314-A0C4-02E496FEB6CD");

        NavigationManager.NavigateTo("/home");
        //}
        //else
        //{
        //    vispopup = true;
        //}

    }

    // private void OnOkButtonClicked()
    // {
    //     vispopup = false;
    //     NavigationManager.NavigateTo("/");
    // }

    #region Operatör ButtonEdit

    SfTextBox EmployeesButtonEdit;
    bool SelectEmployeesPopupVisible = false;

    public async Task EmployeesCodeOnCreateIcon()
    {
        var EmployeesCodeButtonClick = EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, EmployeesButtonClickEvent);
        await EmployeesButtonEdit.AddIconAsync("append", "e-search-icon", new Dictionary<string, object>() { { "onclick", EmployeesCodeButtonClick } });
    }

    public async void EmployeesButtonClickEvent()
    {
        SelectEmployeesPopupVisible = true;
        EmployeesList = (await EmployeesAppService.GetListAsync(new ListEmployeesParameterDto())).Data.Where(t => t.IsProductionScreenUser == true).ToList();
        await InvokeAsync(StateHasChanged);
    }


    public void EmployeesOnValueChange(ChangedEventArgs args)
    {
        if (args.Value == null)
        {
            LoginedUserService.UserId = Guid.Empty;
            AppService.EmployeeID = Guid.Empty;
            User = string.Empty;
        }
    }

    public async void EmployeesDoubleClickHandler(RecordDoubleClickEventArgs<ListEmployeesDto> args)
    {
        var selectedEmployee = args.RowData;

        if (selectedEmployee != null)
        {
            LoginedUserService.UserId = selectedEmployee.Id;
            AppService.EmployeeID = selectedEmployee.Id;
            User = selectedEmployee.Name + " " + selectedEmployee.Surname;
            SelectEmployeesPopupVisible = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    #endregion
}
