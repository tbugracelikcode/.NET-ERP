@page "/production-tracking"
@layout MainLayout



@inject IStringLocalizer<ProductionTrackingsResource> L
@inherits BaseListPage<SelectProductionTrackingsDto, ListProductionTrackingsDto, CreateProductionTrackingsDto, UpdateProductionTrackingsDto, ListProductionTrackingsParameterDto>

@inject IProductionTrackingsAppService ProductionTrackingsAppService
@inject IWorkOrdersAppService WorkOrdersAppService
@inject IStationsAppService StationsAppService
@inject IProductsOperationsAppService ProductsOperationsAppService
@inject IShiftsAppService ShiftsAppService
@inject ICurrentAccountCardsAppService CurrentAccountCardsAppService
@inject IEmployeesAppService EmployeesAppService
@inject IHaltReasonsAppService HaltsAppService
@inject IFicheNumbersAppService FicheNumbersAppService
@inject IOperationStockMovementsAppService OperationStockMovementsAppService
@inject IUserPermissionsAppService UserPermissionsAppService
@inject IMenusAppService MenusAppService
@inject IGetSQLDateAppService GetSQLDateAppService


@if (!base.IsLoaded)
{
    <CircleLoading Caption="@base.LoadingCaption" Text="@base.LoadingText" />
}
else
{
    <DevGridLayout ColumnCount="1" RowCount="3" RowHeights="@RowHeights("*")">
        <GridLayoutItems>
            <DxGridLayoutItem Row="0" Column="0" ColumnSpan="1">
                <Template>
                    <SfCard class="TSIListPageTitleCard">
                        <CardContent>
                            <TsiBreadCrumb PreviousMenus="@L["UIPreviousMenu"]" CurrentMenu="@L["UICurrentMenu"]" />
                        </CardContent>
                        <CardFooter>
                        </CardFooter>
                    </SfCard>
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Row="2" Column="0" ColumnSpan="1">
                <Template>
                    <SfCard class="TSIGridCards">

                        <CardContent>
                            <SfGrid ID="Grid" @ref="_grid"  AllowPdfExport=true ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@ListDataSource" AllowPaging="false" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowSelection="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSorting="true" Height="100%" Width="100%" class="GridZebra" ContextMenuItems="@MainGridContextMenu" Toolbar=@GridToolbarItems>
                                <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                <GridEvents ContextMenuItemClicked="@MainContextMenuClick" OnToolbarClick="@ToolbarClickHandler" TValue="ListProductionTrackingsDto"></GridEvents>
                                <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridPageSettings PageSizes="true"></GridPageSettings>
                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.ProductionTrackingTypes) HeaderText="@L["ProductionTrackingTypes"]" TextAlign="TextAlign.Center" Width="160">
                                        <Template>
                                            @{
                                                ProductionTrackingTypesEnum productionTrackingTypes = (context as ListProductionTrackingsDto).ProductionTrackingTypes;

                                                string typeName = string.Empty;

                                                switch(productionTrackingTypes)
                                                {
                                                    case ProductionTrackingTypesEnum.Durus: typeName = L["EnumHalt"]; break;
                                                    case ProductionTrackingTypesEnum.Operasyonda: typeName = L["EnumInOperation"]; break;
                                                    case ProductionTrackingTypesEnum.Ayar: typeName = L["EnumAdjustment"]; break;
                                                }
                                            }
                                            @typeName
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.WorkOrderCode) HeaderText="@L["WorkOrderCode"]" TextAlign="TextAlign.Center" Width="160"></GridColumn>

                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.OperationStartDate) Format="dd.MM.yyyy" HeaderText="@L["OperationStartDate"]" TextAlign="TextAlign.Center" Width="190">
                                        <Template>
                                            @{
                                                string operationStartTime = (context as ListProductionTrackingsDto).OperationStartDate.ToShortDateString()
                                                + " "
                                                + (context as ListProductionTrackingsDto).OperationStartTime.GetValueOrDefault().ToString();
                                            }
                                            @operationStartTime
                                        </Template>
                                    </GridColumn>

                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.OperationEndDate) Format="dd.MM.yyyy" HeaderText="@L["OperationEndDate"]" TextAlign="TextAlign.Center" Width="160">
                                        <Template>
                                            @{
                                                string operationEndTime = (context as ListProductionTrackingsDto).OperationEndDate.ToShortDateString()
                                                + " "
                                                + (context as ListProductionTrackingsDto).OperationEndTime.GetValueOrDefault().ToString();
                                            }
                                            @operationEndTime
                                        </Template>
                                    </GridColumn>

                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.PlannedQuantity) Type="ColumnType.Number" HeaderText="@L["PlannedQuantity"]" TextAlign="TextAlign.Center" Format="N0" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.FaultyQuantity) Type="ColumnType.Number" HeaderText="@L["FaultyQuantity"]" TextAlign="TextAlign.Center" Format="N0" Width="220"></GridColumn>

                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.ProducedQuantity) HeaderText="@L["ProducedQuantity"]" TextAlign="TextAlign.Center" Format="N0" Width="210"></GridColumn>

                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.OperationTime) HeaderText="@L["OperationTime"]" TextAlign="TextAlign.Center" Format="N0" Width="220"></GridColumn>

                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.HaltTime) Type="ColumnType.Number" HeaderText="@L["HaltTime"]" TextAlign="TextAlign.Center" Format="N0" Width="160"></GridColumn>

                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.AdjustmentTime) Type="ColumnType.Number" HeaderText="@L["AdjustmentTime"]" TextAlign="TextAlign.Center" Format="N0" Width="160"></GridColumn>

                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.StationCode) HeaderText="@L["StationCode"]" TextAlign="TextAlign.Center" Width="190"></GridColumn>

                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.EmployeeName) HeaderText="@L["EmployeeName"]" TextAlign="TextAlign.Center" Width="160"></GridColumn>

                                    @*  <GridColumn Field=@nameof(ListProductionTrackingsDto.ShiftCode) HeaderText="@L["ShiftCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn> *@

                                    <GridColumn Field=@nameof(ListProductionTrackingsDto.IsFinished) HeaderText="@L["IsFinished"]" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="160"></GridColumn>

                                </GridColumns>


                                <GridAggregates>
                                    <GridAggregate>
                                        <GridAggregateColumns>
                                            <GridAggregateColumn Field="@nameof(ListProductionTrackingsDto.ProducedQuantity)" Type="AggregateType.Sum" Format="N0"></GridAggregateColumn>
                                            <GridAggregateColumn Field="@nameof(ListProductionTrackingsDto.AdjustmentTime)" Type="AggregateType.Sum" Format="N0"></GridAggregateColumn>
                                            <GridAggregateColumn Field="@nameof(ListProductionTrackingsDto.HaltTime)" Type="AggregateType.Sum" Format="N0"></GridAggregateColumn>
                                            <GridAggregateColumn Field="@nameof(ListProductionTrackingsDto.OperationTime)" Type="AggregateType.Sum" Format="N0"></GridAggregateColumn>
                                            <GridAggregateColumn Field="@nameof(ListProductionTrackingsDto.FaultyQuantity)" Type="AggregateType.Sum" Format="N0">
                                            </GridAggregateColumn> 
                                        </GridAggregateColumns>
                                    </GridAggregate>
                                </GridAggregates>
                            </SfGrid>
                        </CardContent>
                        <CardFooter>
                        </CardFooter>
                    </SfCard>
                </Template>
            </DxGridLayoutItem>
        </GridLayoutItems>
    </DevGridLayout>


    <DxPopup @bind-Visible="base.EditPageVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["EditModalTitle"]"
             Width="63%"
             Height="56%"
             MinWidth="1060px"
             MinHeight="600px"
             HeaderCssClass="HeaderTitleCss"
             Showing="CrudModalShowing"
             Closing="CrudModalClosing">

        <BodyTemplate>
            <DxGridLayout CssClass="TSIGridLayout">

                <Rows>
                    <DxGridLayoutRow Height="18%" />
                    <DxGridLayoutRow Height="16%" />
                    <DxGridLayoutRow Height="16%" />
                    <DxGridLayoutRow Height="16%" />
                    <DxGridLayoutRow Height="16%" />
                    <DxGridLayoutRow Height="16%" />
                </Rows>

                <Columns>
                    <DxGridLayoutColumn Width="4%" />
                    <DxGridLayoutColumn Width="28%" />
                    <DxGridLayoutColumn Width="4%" />
                    <DxGridLayoutColumn Width="28%" />
                    <DxGridLayoutColumn Width="4%" />
                    <DxGridLayoutColumn Width="28%" />
                    <DxGridLayoutColumn Width="4%" />
                </Columns>

                <Items>

                    <DxGridLayoutItem Row="0" Column="1">
                        <Template>
                            <br />
                            <label class="TSIModalLabel"><strong>@L["CodeLabel"] </strong></label><br />
                            <SfTextBox @ref="@CodeButtonEdit" Created="@CodeOnCreateIcon" @bind-Value="DataSource.Code" ShowClearButton=true></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="0" Column="3" ColumnSpan="4" RowSpan="2">
                        <Template>
                            <br />
                            <label class="TSIModalLabel"><strong>@L["Description_Label"] </strong></label><br />
                            <SfTextBox Multiline=true CssClass="TSIMemoBox60" @bind-Value="DataSource.Description_"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["WorkOrderCodeLabel"] </strong></label><br />
                            <SfTextBox @ref="@WorkOrdersButtonEdit" Created="@WorkOrdersCodeOnCreateIcon" @bind-Value="DataSource.WorkOrderCode" ShowClearButton=true ValueChange="WorkOrdersOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["StationCodeLabel"] </strong></label>
                            <SfTextBox @ref="@StationsButtonEdit" Created="@StationsCodeOnCreateIcon" @bind-Value="DataSource.StationCode" ShowClearButton=true ValueChange="StationsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>
                    
                    <DxGridLayoutItem Row="2" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["EmployeeNameLabel"] </strong></label>
                            <SfTextBox @ref="@EmployeesButtonEdit" Created="@EmployeesCodeOnCreateIcon" @bind-Value="DataSource.EmployeeName" ShowClearButton=true ValueChange="EmployeesOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>
                    
                    <DxGridLayoutItem Row="2" Column="5">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["ShiftCodeLabel"] </strong></label>
                            <SfTextBox @ref="@ShiftsButtonEdit" Created="@ShiftsCodeOnCreateIcon" @bind-Value="DataSource.ShiftCode" ShowClearButton=true ValueChange="ShiftsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="3" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["OperationStartDateLabel"] </strong></label><br />
                            <SfDatePicker @bind-Value="@DataSource.OperationStartDate" OnChange="OnDateChange"></SfDatePicker>
                        </Template>
                    </DxGridLayoutItem>
                    <DxGridLayoutItem Row="3" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["OperationStartTimeLabel"] </strong></label>
                            <SfTimePicker Step="15" Format="@("hh\\:mm\\:ss")" TValue="TimeSpan?" @bind-Value="@DataSource.OperationStartTime"></SfTimePicker>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="3" Column="5">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["ProducedQuantityLabel"] </strong></label>
                            <SfNumericTextBox CssClass="TSITxtBox" @bind-Value="DataSource.ProducedQuantity"></SfNumericTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="4" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["OperationEndDateLabel"] </strong></label><br />
                            <SfDatePicker @ref="@_endDatePicker" @bind-Value="@DataSource.OperationEndDate" OnFocus="OnDateFocus" Min="@Convert.ToDateTime(DataSource.OperationStartDate)"></SfDatePicker>
                        </Template>
                    </DxGridLayoutItem>
                    <DxGridLayoutItem Row="4" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["OperationEndTimeLabel"] </strong></label>
                            <SfTimePicker Step="15" Format="@("hh\\:mm\\:ss")" TValue="TimeSpan?" @bind-Value="@DataSource.OperationEndTime"></SfTimePicker>
                        </Template>
                    </DxGridLayoutItem>

                     <DxGridLayoutItem Row="4" Column="5">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["TypeLabel"] </strong></label><br />
                            <SfDropDownList TItem="SelectProductionTrackingsDto" TValue="ProductionTrackingTypesEnum" PopupHeight="230px" @bind-Value="@DataSource.ProductionTrackingTypes" DataSource="@types">
                                <DropDownListFieldSettings Text="ProductionTrackingTypesName" Value="ProductionTrackingTypes"></DropDownListFieldSettings> <DropDownListEvents TItem="SelectProductionTrackingsDto" TValue="ProductionTrackingTypesEnum" ValueChange="@ProductionTrackingTypeValueChangeHandler"></DropDownListEvents>
                            </SfDropDownList>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="5" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CurrentAccountCardCustomerCodeLabel"] </strong></label><br />
                            <SfTextBox CssClass="TSITxtBox" Enabled=false @bind-Value="DataSource.CustomerCode"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>


                    <DxGridLayoutItem Row="5" Column="3">
                        <Template><center>
                            <label class="TSIModalLabel"><strong>@L["IsFinishedLabel"] </strong></label><br />
                            <SfSwitch @bind-Checked="DataSource.IsFinished">
                            </SfSwitch></center>
                        </Template>
                    </DxGridLayoutItem>

                      <DxGridLayoutItem Row="5" Column="5">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["HaltNameLineLabel"] </strong></label>
                            <SfTextBox @ref="@HaltReasonsButtonEdit" Enabled="HaltReasonEnable" Created="@HaltReasonsCodeOnCreateIcon" @bind-Value="DataSource.HaltReasonCode" ShowClearButton=true ValueChange="HaltReasonsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                </Items>
            </DxGridLayout>
        </BodyTemplate>
        <FooterContentTemplate>
            <SfButton CssClass="TSISaveButton" OnClick="OnSubmit"><SfIcon Size="IconSize.Medium" Name="IconName.Save"></SfIcon>&nbsp;@L["SaveButton"]</SfButton>
            <SfButton CssClass="TSICancelButton" OnClick="HideEditPage"><SfIcon Size="IconSize.Medium" Name="IconName.Undo"></SfIcon>&nbsp;@L["CloseButton"]</SfButton>
        </FooterContentTemplate>
    </DxPopup>


}


@if (SelectCurrentAccountCardsPopupVisible)
{
    <DxPopup @bind-Visible="SelectCurrentAccountCardsPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["CurrentAccountModalTitle"]"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="CurrentAccountCardsGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@CurrentAccountCardsList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@CurrentAccountCardsDoubleClickHandler" TValue="ListCurrentAccountCardsDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.Code) HeaderText="@L["CurrentAccountCardCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.Name) HeaderText="@L["CurrentAccountCardName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.CustomerCode) HeaderText="@L["CurrentAccountCardCustomerCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectShiftsPopupVisible)
{
    <DxPopup @bind-Visible="SelectShiftsPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["ShiftModalTitle"]"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="ShiftsGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@ShiftsList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@ShiftsDoubleClickHandler" TValue="ListShiftsDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListShiftsDto.Code) HeaderText="@L["ShiftModalGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListShiftsDto.Name) HeaderText="@L["ShiftModalGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectStationsPopupVisible)
{
    <DxPopup @bind-Visible="SelectStationsPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["StationModalTitle"]"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="StationsGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@StationsList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@StationsDoubleClickHandler" TValue="ListStationsDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListStationsDto.Code) HeaderText="@L["StationModalGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListStationsDto.Name) HeaderText="@L["StationModalGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectEmployeesPopupVisible)
{
    <DxPopup @bind-Visible="SelectEmployeesPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["EmployeeModalTitle"]"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="EmployeesGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@EmployeesList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@EmployeesDoubleClickHandler" TValue="ListEmployeesDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListEmployeesDto.Code) HeaderText="@L["EmployeeModalGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListEmployeesDto.Name) HeaderText="@L["EmployeeModalGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListEmployeesDto.Surname) HeaderText="@L["EmployeeModalGridSurName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectWorkOrdersPopupVisible)
{
    <DxPopup @bind-Visible="SelectWorkOrdersPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["WordOrderModalTitle"]"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="WorkOrdersGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@WorkOrdersList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@WorkOrdersDoubleClickHandler" TValue="ListWorkOrdersDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListWorkOrdersDto.WorkOrderNo) HeaderText="@L["WordOrderModalGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListWorkOrdersDto.WorkOrderNo) HeaderText="@L["WordOrderModalGridWorkOrderNr"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>

                                            <GridColumn Field=@nameof(ListWorkOrdersDto.WorkOrderState) HeaderText="@L["WorkOrderState"]" TextAlign="TextAlign.Center" Width="120">

                                        <Template Context="workOrderContext">
                                            @{
                                                        WorkOrderStateEnum stateEnumform = (workOrderContext as ListWorkOrdersDto).WorkOrderState;
                                                string stateForm = "";

                                                if (stateEnumform == WorkOrderStateEnum.Baslamadi)
                                                {
                                                    stateForm = L["WorkOrderEnumBaslamadi"];
                                                }
                                                else if(stateEnumform == WorkOrderStateEnum.Durduruldu)
                                                {
                                                    stateForm = L["WorkOrderEnumDurduruldu"];
                                                }
                                                else if(stateEnumform == WorkOrderStateEnum.Iptal)
                                                {
                                                    stateForm = L["WorkOrderEnumIptal"];
                                                }
                                                else if(stateEnumform == WorkOrderStateEnum.DevamEdiyor)
                                                {
                                                    stateForm = L["WorkOrderEnumDevamEdiyor"];
                                                }
                                                else if(stateEnumform == WorkOrderStateEnum.Tamamlandi)
                                                {
                                                    stateForm = L["WorkOrderEnumTamamlandi"];
                                                }
                                        }
                                        @stateForm
                                    </Template>

                                    </GridColumn>

                                            <GridColumn Field=@nameof(ListWorkOrdersDto.ProductCode) HeaderText="@L["WordOrderModalGridProductCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListWorkOrdersDto.ProductName) HeaderText="@L["WordOrderModalGridProductName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>

                                            <GridColumn Field=@nameof(ListWorkOrdersDto.PlannedQuantity) HeaderText="@L["WorkOrderPlannedQuantity"]" TextAlign="TextAlign.Center" Type="ColumnType.Number" Width="120" Format="N0"></GridColumn>

                                            <GridColumn Field=@nameof(ListWorkOrdersDto.ProducedQuantity) HeaderText="@L["WorkOrderProducedQuantity"]" TextAlign="TextAlign.Center" Type="ColumnType.Number" Width="120" Format="N0"></GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectHaltReasonsPopupVisible)
{
    <DxPopup @bind-Visible="SelectHaltReasonsPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["HaltModalTitle"]"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="HaltReasonsGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@HaltReasonsList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@HaltReasonsDoubleClickHandler" TValue="ListHaltReasonsDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListHaltReasonsDto.Code) HeaderText="@L["HaltModalGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListHaltReasonsDto.Name) HeaderText="@L["HaltModalGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListHaltReasonsDto.IsPlanned) DisplayAsCheckBox=true HeaderText="@L["HaltModalGridIsPlanned"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}
