@page "/bills-of-materials"

@layout MainLayout

@inherits BaseListPage<SelectBillsofMaterialsDto, ListBillsofMaterialsDto, CreateBillsofMaterialsDto, UpdateBillsofMaterialsDto, ListBillsofMaterialsParameterDto>

@inject IStringLocalizer<BillsofMaterialsResource> L
@inject IBillsofMaterialsAppService BillsofMaterialsAppService
@inject IProductsAppService ProductsAppService
@inject ICurrentAccountCardsAppService CurrentAccountCardsAppService
@inject IUnitSetsAppService UnitSetsAppService 
@inject IFicheNumbersAppService FicheNumbersAppService
@inject IUserPermissionsAppService UserPermissionsAppService
@inject IMenusAppService MenusAppService
@inject IProductionManagementParametersAppService ProductionManagementParametersService


@if (!base.IsLoaded)
{
    <CircleLoading Caption="@base.LoadingCaption" Text="@base.LoadingText" />
}
else
{
    <DevGridLayout ColumnCount="1" RowCount="3" RowHeights="@RowHeights("*")">
        <GridLayoutItems>
            <DxGridLayoutItem Row="0" Column="0" ColumnSpan="1">
                <Template>
                    <SfCard class="TSIListPageTitleCard">
                        <CardContent>
                            <TsiBreadCrumb PreviousMenus="@L["UIPreviousMenus"]" CurrentMenu="@L["UICurrentMenu"]" />
                        </CardContent>
                        <CardFooter>
                        </CardFooter>
                    </SfCard>
                </Template>
            </DxGridLayoutItem>

            <DxGridLayoutItem Row="2" Column="0" ColumnSpan="1">
                <Template>
                    <SfCard class="TSIGridCards">

                        <CardContent>
                            <SfGrid ID="Grid" @ref="_grid"  AllowPdfExport=true ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@ListDataSource" AllowPaging="false" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowSelection="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSorting="true" Height="100%" Width="100%" class="GridZebra" ContextMenuItems="@MainGridContextMenu" Toolbar=@GridToolbarItems>
                                <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>


                                <GridEvents ContextMenuItemClicked="@MainContextMenuClick" OnToolbarClick="@ToolbarClickHandler" TValue="ListBillsofMaterialsDto"></GridEvents>
                                <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridPageSettings PageSizes="true"></GridPageSettings>
                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(ListBillsofMaterialsDto.Code) HeaderText="@L["Code"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                    <GridColumn Field=@nameof(ListBillsofMaterialsDto.Name) HeaderText="@L["Name"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                    <GridColumn Field=@nameof(ListBillsofMaterialsDto.CustomerCode) HeaderText="@L["CustomerCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>

                                    <GridColumn Field=@nameof(ListBillsofMaterialsDto.FinishedProductCode) HeaderText="@L["FinishedProductCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                    <GridColumn Field=@nameof(ListBillsofMaterialsDto._Description) HeaderText="@L["_Description"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>


                                </GridColumns>
                            </SfGrid>
                        </CardContent>
                        <CardFooter>
                        </CardFooter>
                    </SfCard>
                </Template>
            </DxGridLayoutItem>
        </GridLayoutItems>
    </DevGridLayout>

    <DxPopup @bind-Visible="base.EditPageVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["EditModalTitle"]"
             Width="60%"
             Height="60%"
             MinWidth="1120px"
             MinHeight="670px"
             HeaderCssClass="HeaderTitleCss"
             Showing="CrudModalShowing"
             Closing="CrudModalClosing">

        <BodyTemplate>
            <DxGridLayout CssClass="TSIGridLayout">

                <Rows>
                    <DxGridLayoutRow Height="12%" />
                    <DxGridLayoutRow Height="12%" />
                    <DxGridLayoutRow Height="12%" />
                    <DxGridLayoutRow Height="2%" />
                    <DxGridLayoutRow Height="48%" />
                </Rows>

                <Columns>
                    <DxGridLayoutColumn Width="6%" />
                    <DxGridLayoutColumn Width="42%" />
                    <DxGridLayoutColumn Width="6%" />
                    <DxGridLayoutColumn Width="42%" />
                    <DxGridLayoutColumn Width="4%" />
                </Columns>

                <Items>
                    <DxGridLayoutItem Row="0" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CodeLabel"] </strong></label>
                            @* <SfTextBox CssClass="TSITxtBox" @bind-Value="DataSource.Code"></SfTextBox> *@

                            <SfTextBox @ref="@CodeButtonEdit" Created="@CodeOnCreateIcon" @bind-Value="DataSource.Code" ShowClearButton=true></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="0" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["NameLabel"] </strong></label>
                            <SfTextBox CssClass="TSITxtBox" @bind-Value="DataSource.Name"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["FinishedProductNameLabel"] </strong></label><br />
                            <SfTextBox @ref="@FinishedProductsNameButtonEdit" Created="@FinishedProductsNameOnCreateIcon" @bind-Value="DataSource.FinishedProducName" ShowClearButton=true ValueChange="FinishedProductsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>
                    <DxGridLayoutItem Row="1" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CustomerCodeLabel"] </strong></label><br />
                            <SfTextBox @ref="@CurrentAccountCardsCustomerCodeButtonEdit" Created="@CurrentAccountCardsCustomerCodeOnCreateIcon" @bind-Value="DataSource.CustomerCode" ShowClearButton=true ValueChange="CurrentAccountCardsOnValueChange" Enabled="@isCustomerCodeAvailable"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["FinishedProductCodeLabel"] </strong></label><br />
                            <SfTextBox @ref="@FinishedProductsCodeButtonEdit" Created="@FinishedProductsCodeOnCreateIcon" @bind-Value="DataSource.FinishedProductCode" ShowClearButton=true ValueChange="FinishedProductsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    @* <DxGridLayoutItem Row="2" Column="3">
                        <Template>
                            <center>
                                <label class="TSIModalLabel"><strong>@L["IsActiveLabel"] </strong></label><br />
                                <SfSwitch @bind-Checked="DataSource.IsActive"></SfSwitch>
                            </center>
                        </Template>
                    </DxGridLayoutItem> *@


                    <DxGridLayoutItem Row="4" Column="1" ColumnSpan="3">
                        <Template>
                            <SfGrid @ref=_LineGrid ID="LineGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@GridLineList" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="false" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra" ContextMenuItems="@LineGridContextMenu">
                                <GridEvents ContextMenuItemClicked="@OnListContextMenuClick" TValue="SelectBillsofMaterialLinesDto"></GridEvents>
                                <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(SelectBillsofMaterialLinesDto.ProductCode) HeaderText="@L["LineGridProductCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                    <GridColumn Field=@nameof(SelectBillsofMaterialLinesDto.UnitSetCode) HeaderText="@L["LineGridUnitSetCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                    <GridColumn Field=@nameof(SelectBillsofMaterialLinesDto.MaterialType) Context="linecontext" HeaderText="@L["LineGridMaterialType"]" TextAlign="TextAlign.Center" Width="120">
                                        <Template>
                                            @{
                                                ProductTypeEnum? producttype = (linecontext as SelectBillsofMaterialLinesDto).MaterialType;
                                                string type = "";
                                                switch (producttype)
                                                {
                                                    case ProductTypeEnum.TM: type = L["EnumCommercialProduct"]; break;
                                                    case ProductTypeEnum.HM: type = L["EnumMaterial"]; break;
                                                    case ProductTypeEnum.YM: type = L["EnumSemiProduct"]; break;
                                                    case ProductTypeEnum.MM: type = L["EnumProduct"]; break;
                                                    case ProductTypeEnum.BP: type = L["EnumSparePart"]; break;
                                                    case ProductTypeEnum.TK: type = L["EnumKit"]; break;
                                                    case ProductTypeEnum.KLP: type = L["EnumMold"]; break;
                                                    case ProductTypeEnum.APRT: type = L["EnumAparatus"]; break;
                                                    default: break;
                                                }
                                            }
                                            @type
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(SelectBillsofMaterialLinesDto.SupplyForm) HeaderText="@L["LineGridSupplyForm"]" TextAlign="TextAlign.Center" Width="120" Context="linecontext">
                                        <Template>
                                            @{
                                                ProductSupplyFormEnum productsupplyform = (linecontext as SelectBillsofMaterialLinesDto).SupplyForm;
                                                string supplyForm = "";
                                                if (productsupplyform == ProductSupplyFormEnum.Satınalma)
                                                {
                                                    supplyForm = L["EnumPurchase"];
                                                }
                                                else if (productsupplyform == ProductSupplyFormEnum.Üretim)
                                                {
                                                    supplyForm = L["EnumProduction"];
                                                }
                                            }
                                            @supplyForm
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(SelectBillsofMaterialLinesDto.Quantity) Format="N6" Type="ColumnType.Number" HeaderText="@L["LineGridQuantity"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                    <GridColumn Field=@nameof(SelectBillsofMaterialLinesDto.Size) Format="N2" Type="ColumnType.Number" HeaderText="@L["LineGridSize"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </Template>
                    </DxGridLayoutItem>


                </Items>
            </DxGridLayout>
        </BodyTemplate>
        <FooterContentTemplate>
            <SfButton CssClass="TSISaveButton" OnClick="OnSubmit"><SfIcon Size="IconSize.Medium" Name="IconName.Save"></SfIcon>&nbsp;@L["SaveButton"]</SfButton>
            <SfButton CssClass="TSICancelButton" OnClick="HideEditPage"><SfIcon Size="IconSize.Medium" Name="IconName.Undo"></SfIcon>&nbsp;@L["CloseButton"]</SfButton>
        </FooterContentTemplate>
    </DxPopup>

    <DxPopup @bind-Visible="LineCrudPopup"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["LineModalTitle"]"
             Width="56%"
             Height="32%"
             MinWidth="1060px"
             MinHeight="350px"
             HeaderCssClass="HeaderTitleCss">

        <BodyTemplate>
            <DxGridLayout CssClass="TSIGridLayout">

                <Rows>
                    <DxGridLayoutRow Height="25%" />
                    <DxGridLayoutRow Height="25%" />
                    <DxGridLayoutRow Height="25%" />
                </Rows>

                <Columns>
                    <DxGridLayoutColumn Width="40px" />
                    <DxGridLayoutColumn Width="300px" />
                    <DxGridLayoutColumn Width="40px" />
                    <DxGridLayoutColumn Width="300px" />
                    <DxGridLayoutColumn Width="40px" />
                    <DxGridLayoutColumn Width="300px" />
                    <DxGridLayoutColumn Width="40px" />

                </Columns>

                <Items>
                    <br />
                    <DxGridLayoutItem Row="0" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["FinishedProductCodeLineLabel"] </strong></label>
                            <SfTextBox Enabled=false @bind-Value="LineDataSource.FinishedProductCode"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="0" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["ProductCodeLineLabel"] </strong></label><br />
                            <SfTextBox @ref="@ProductsCodeButtonEdit" Created="@ProductsCodeOnCreateIcon" @bind-Value="LineDataSource.ProductCode" ShowClearButton=true ValueChange="ProductsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="0" Column="5">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["ProductNameLineLabel"] </strong></label><br />
                            <SfTextBox @ref="@ProductsNameButtonEdit" Created="@ProductsNameOnCreateIcon" @bind-Value="LineDataSource.ProductName" ShowClearButton=true ValueChange="ProductsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["UnitSetLineLabel"] </strong></label><br />

                            <SfTextBox @ref="@UnitSetsButtonEdit" Created="@UnitSetsOnCreateIcon" @bind-Value="LineDataSource.UnitSetCode" ShowClearButton=true ValueChange="UnitSetsOnValueChange"></SfTextBox>

                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["QuantityLineLabel"] </strong></label>
                            <SfNumericTextBox Format="N6" TValue="decimal" @bind-Value="LineDataSource.Quantity" Min="0"></SfNumericTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="5">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["DescriptionLineLabel"] </strong></label>
                            <SfTextBox Multiline=true @bind-Value="LineDataSource._Description"></SfTextBox>

                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>Boy: </strong></label>
                            <SfNumericTextBox Format="N6" Min="0" @bind-Value="LineDataSource.Size" TValue="decimal"></SfNumericTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="3">
                        <Template>
                            <br/>
                            <SfButton CssClass="TSISaveButton" OnClick="(()=>CalculateQuantity(LineDataSource.ProductID.GetValueOrDefault()))"><SfIcon Size="IconSize.Medium" Name="IconName.Save"></SfIcon>&nbsp;@L["CalculateQuantityButton"]</SfButton>
                        </Template>
                    </DxGridLayoutItem>

                </Items>
            </DxGridLayout>
        </BodyTemplate>
        <FooterContentTemplate>
            <SfButton CssClass="TSISaveButton" OnClick="OnLineSubmit"><SfIcon Size="IconSize.Medium" Name="IconName.Save"></SfIcon>&nbsp;@L["SaveButton"]</SfButton>
            <SfButton CssClass="TSICancelButton" OnClick="HideLinesPopup"><SfIcon Size="IconSize.Medium" Name="IconName.Undo"></SfIcon>&nbsp;@L["CloseButton"]</SfButton>
        </FooterContentTemplate>
    </DxPopup>

}

@if (SelectUnitSetsPopupVisible)
{
    <DxPopup @bind-Visible="SelectUnitSetsPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["UnitSetModalTitle"]"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards">

                                <CardContent>
                                    <SfGrid ID="UnitSetGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@UnitSetsList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowSelection="true" ShowColumnChooser="true" GridLines="GridLine.Both"
                                            AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@UnitSetsDoubleClickHandler" TValue="ListUnitSetsDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListUnitSetsDto.Code) HeaderText="@L["UnitSetPopupGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListUnitSetsDto.Name) HeaderText="@L["UnitSetPopupGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>

                                        </GridColumns>
                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
            @*<SfButton CssClass="TSISaveButton" OnClick="OnSubmit"><SfIcon Size="IconSize.Medium" Name="IconName.Save"></SfIcon>&nbsp;Kaydet</SfButton>
        <SfButton CssClass="TSICancelButton" OnClick="HideEditPage"><SfIcon Size="IconSize.Medium" Name="IconName.Undo"></SfIcon>&nbsp;Kapat</SfButton>*@
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectProductsPopupVisible)
{
    <DxPopup @bind-Visible="SelectProductsPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["ProductModalTitle"]"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards">

                                <CardContent>
                                    <SfGrid ID="ProductsGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@ProductsList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@ProductsDoubleClickHandler" TValue="ListProductsDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListProductsDto.Code) HeaderText="@L["ProductPopupGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListProductsDto.Name) HeaderText="@L["ProductPopupGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListProductsDto.ProductType) HeaderText="@L["ProductPopupGridProductType"]" TextAlign="TextAlign.Center" Width="120" Context="productContext">
                                                <Template>
                                                    @{
                                                        ProductTypeEnum producttype = (productContext as ListProductsDto).ProductType;
                                                        string type = "";
                                                        switch (producttype)
                                                        {
                                                            case ProductTypeEnum.TM: type = L["EnumCommercialProduct"]; break;
                                                            case ProductTypeEnum.HM: type = L["EnumMaterial"]; break;
                                                            case ProductTypeEnum.YM: type = L["EnumSemiProduct"]; break;
                                                            case ProductTypeEnum.MM: type = L["EnumProduct"]; break;
                                                            case ProductTypeEnum.BP: type = L["EnumSparePart"]; break;
                                                            case ProductTypeEnum.TK: type = L["EnumKit"]; break;
                                                            case ProductTypeEnum.KLP: type = L["EnumMold"]; break;
                                                            case ProductTypeEnum.APRT: type = L["EnumAparatus"]; break;
                                                            default: break;
                                                        }
                                                    }
                                                    @type
                                                </Template>
                                            </GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectFinishedProductsPopupVisible)
{
    <DxPopup @bind-Visible="SelectFinishedProductsPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["FinishedProductModalTitle"]"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards">

                                <CardContent>
                                    <SfGrid ID="FinishedProductsGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@FinishedProductsList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@FinishedProductsDoubleClickHandler" TValue="ListProductsDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListProductsDto.Code) HeaderText="@L["FinishedProductPopupGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListProductsDto.Name) HeaderText="@L["FinishedProductPopupGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListProductsDto.ProductType) HeaderText="@L["ProductPopupGridProductType"]" TextAlign="TextAlign.Center" Width="120" Context="productContext">
                                                <Template>
                                                    @{
                                                        ProductTypeEnum producttype = (productContext as ListProductsDto).ProductType;
                                                        string type = "";
                                                        switch (producttype)
                                                        {
                                                            case ProductTypeEnum.TM: type = L["EnumCommercialProduct"]; break;
                                                            case ProductTypeEnum.HM: type = L["EnumMaterial"]; break;
                                                            case ProductTypeEnum.YM: type = L["EnumSemiProduct"]; break;
                                                            case ProductTypeEnum.MM: type = L["EnumProduct"]; break;
                                                            case ProductTypeEnum.BP: type = L["EnumSparePart"]; break;
                                                            case ProductTypeEnum.TK: type = L["EnumKit"]; break;
                                                            case ProductTypeEnum.KLP: type = L["EnumMold"]; break;
                                                            case ProductTypeEnum.APRT: type = L["EnumAparatus"]; break;
                                                            default: break;
                                                        }
                                                    }
                                                    @type
                                                </Template>
                                            </GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectCurrentAccountCardsPopupVisible)
{
    <DxPopup @bind-Visible="SelectCurrentAccountCardsPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["CurrentAccountModalTitle"]"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards">

                                <CardContent>
                                    <SfGrid ID="CurrentAccountCardsGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@CurrentAccountCardsList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@CurrentAccountCardsDoubleClickHandler" TValue="ListCurrentAccountCardsDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.Code) HeaderText="@L["CurrentAccountCardCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.Name) HeaderText="@L["CurrentAccountCardName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.CustomerCode) HeaderText="@L["CurrentAccountCardCustomerCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}