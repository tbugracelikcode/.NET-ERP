@page "/home"
@layout MainLayout

@inject IStringLocalizer<IndexResource> L

@inject IShipmentPlanningsAppService ShipmentPlanningsAppService
@inject ISalesOrdersAppService SalesOrdersAppService
@inject IProductGroupsAppService ProductGroupsAppService
@inject IProductsAppService ProductsAppService
@inject ICurrentAccountCardsAppService CurrentAccountCardsAppService
@inject IPackingListsAppService PackingListsAppService

<div class="control-section">
    <div class="col-lg-12 col-sm-12 col-md-12" id="sidebar-section">
        <div id="head">
            <div class="header">
                <div class="menu"><span class="e-icons expand"></span></div>
                <div class="searchContent">
                    <div class="analysis">TSI Dashboard</div>
                </div>
                <div class="right-content">
                    <div class="information">
                    </div>
                </div>
            </div>
        </div>

        <div id="target">
            <div class="sidebar-content">
                <div class="dashboardParent">
                    <SfDashboardLayout @ref="dashboardObject" Columns="6" CellSpacing="@(new double[]{10 ,10 })" AllowDragging="false" AllowFloating="false">
                        <DashboardLayoutPanels>

                            <DashboardLayoutPanel SizeX="2" SizeY="2" Row="0" Column="0">
                                <HeaderTemplate>
                                    <div>@L["ClosestLoadingPanelTitle"]</div>
                                </HeaderTemplate>
                                <ContentTemplate>

                                    <span class="e-icons plan"></span>
                                    <div class="card-content text">@L["Planned"] @PlannedQuantity</div>
                                    <SfAccumulationChart Theme="@Theme" Height="100%" Width="100%" EnableSmartLabels="true" SelectionMode="AccumulationSelectionMode.Point">
                                        <AccumulationChartCenter X="50%" Y="45%"></AccumulationChartCenter>
                                        <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                                        <AccumulationChartLegendSettings Visible="false" Position="@Syncfusion.Blazor.Charts.LegendPosition.Bottom"></AccumulationChartLegendSettings>
                                        <AccumulationChartSeriesCollection>
                                            <AccumulationChartSeries DataSource="@ShipmentDataList" XName="QuantityType" YName="Count" Radius="80%" InnerRadius="0%" Name="" Explode="true" ExplodeIndex="2" ExplodeOffset="10%" Palettes="@(new string[] { "#357cd2", "#00bdae", "#e36593" })">
                                                <AccumulationDataLabelSettings Visible="true" Name="Text" Position="AccumulationLabelPosition.Inside">
                                                    <AccumulationChartDataLabelFont FontWeight="600"></AccumulationChartDataLabelFont>
                                                </AccumulationDataLabelSettings>
                                            </AccumulationChartSeries>
                                        </AccumulationChartSeriesCollection>
                                    </SfAccumulationChart>
                                </ContentTemplate>
                            </DashboardLayoutPanel>

                            <DashboardLayoutPanel SizeX="4" SizeY="2" Row="0" Column="3">
                                <HeaderTemplate>
                                    <div>@L["NotShippedPanelTitle"]</div>
                                </HeaderTemplate>
                                <ContentTemplate>
                                    <SfChart Theme="@Theme" Height="100%" Width="100%">
                                        <ChartMargin Top="30"></ChartMargin>
                                        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1">
                                            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                        </ChartPrimaryXAxis>
                                        <ChartPrimaryYAxis DesiredIntervals="10" Interval="10">
                                            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                        </ChartPrimaryYAxis>
                                        <ChartSeriesCollection>
                                            @foreach (var item in NotShippedProductGroupsList)

                                            {
                                                <ChartSeries DataSource="@NotShippedProductGroupsList" Fill="#e36593" XName="ProductGroupName" YName="Amount" Name="@item.ProductGroupName" Type="Syncfusion.Blazor.Charts.ChartSeriesType.Column" Width="2">
                                                    <ChartMarker>
                                                        <ChartDataLabel Visible="false" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                                                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                        </ChartDataLabel>
                                                    </ChartMarker>
                                                </ChartSeries>
                                            }


                                        </ChartSeriesCollection>
                                        <ChartTooltipSettings Enable="true">
                                            <Template>
                                                @{
                                                    var data = context as ChartTooltipInfo;
                                                    <div>
                                                        <table class="TSIIndexChartTooltip">

                                                            <tr><th colspan="4" style="font-weight:bold"><center>@L["NotShippedTooltipTitle"]</center></th></tr>
                                                            <tr> <td><strong>@L["NotShippedTooltipDetailTitle1"]</strong></td> <td><strong>@L["NotShippedTooltipDetailTitle2"]</strong></td> <td><strong>@L["NotShippedTooltipDetailTitle3"]</strong> </td> <td><strong>@L["NotShippedTooltipDetailTitle4"]</strong></td></tr>
                                                            @foreach (var detail in NotShippedProductGroupsTooltipList)
                                                            {
                                                                if (detail.ProductGroupName == data.X.ToString())
                                                                {
                                                                    <tr>
                                                                        <td>
                                                                            @detail.OrderNo
                                                                        </td>

                                                                        <td>
                                                                            @detail.CurrentAccountCode
                                                                        </td>

                                                                        <td>
                                                                            @detail.RequestedDate.ToShortDateString()
                                                                        </td>

                                                                        <td>
                                                                            @detail.Amount
                                                                        </td>
                                                                    </tr>


                                                                }
                                                            }


                                                        </table>
                                                    </div>
                                                }
                                            </Template>
                                        </ChartTooltipSettings>
                                        <ChartLegendSettings Visible="true"></ChartLegendSettings>
                                    </SfChart>
                                </ContentTemplate>
                            </DashboardLayoutPanel>

                            <DashboardLayoutPanel SizeX="6" SizeY="2" Row="2" Column="0">
                                <HeaderTemplate>
                                    <div>@L["OpenOrderBalancePanelTitle"]</div>
                                </HeaderTemplate>
                                <ContentTemplate>

                                    <div class="TSIScrollableIndexPanel">
                                        <table style="font-size: 16px;">
                                            <tr style="text-align: center;">
                                                <th style="font-size: 16px;font-weight: bold;"><strong>@L["OpenOrderNo"]</strong></th>
                                                <th style="font-size: 16px;font-weight: bold;"><strong>@L["OpenOrderLoadingDate"]</strong></th>
                                                <th style="font-size: 16px;font-weight: bold;"><strong>@L["OpenOrderAmount"]</strong></th>
                                                <th style="font-size: 16px;font-weight: bold;"><strong>@L["OpenOrderBalance"]</strong></th>
                                                <th style="font-size: 16px;font-weight: bold;"><strong>@L["OpenOrderRate"]</strong></th>
                                            </tr>
                                            @foreach (var item in OpenOrderBalancesList)

                                            {
                                                <tr><td>@item.OrderNo</td><td>@item.ShippingDate.ToShortDateString()</td><td>@item.Amount</td><td>@item.Balance</td>
                                                    @if(item.ShippingRate < 30 && item.ShippingRate != 0){
                                                         <td><table>
                                                        <tr>
                                                                <td style="width:@item.ShippingRate%; background-color: #37b727;"></td>
                                                                <td >% @item.ShippingRate</td>
                                                        </tr>
                                                            </table></td>
                                                    }
                                                    else if (item.ShippingRate == 0)
                                                    {
                                                         <td><table>
                                                        <tr>
                                                                <td >% @item.ShippingRate</td>
                                                        </tr>
                                                            </table></td>
                                                    }
                                                    else
                                                    {
                                                        <td>
                                                            <table>
                                                                <tr>
                                                                    <td style="width:@item.ShippingRate%; background-color: #37b727;">% @item.ShippingRate</td>
                                                                    <td></td>
                                                                </tr>
                                                            </table>
                                                        </td>
                                                    }
                                                   
                                                  
                                                </tr>
                                            }
                                        </table>
                                    </div>



                                </ContentTemplate>
                            </DashboardLayoutPanel>

                            <DashboardLayoutPanel SizeX="6" SizeY="2" Row="4" Column="0">
                                <HeaderTemplate>
                                    <div>@L["OrdersbyMonthsPanelTitle"]</div>
                                </HeaderTemplate>
                                <ContentTemplate>
                                    <SfChart>
                                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                                        <ChartPrimaryYAxis DesiredIntervals="10" Interval="10">
                                        </ChartPrimaryYAxis>
                                        <ChartSeriesCollection>
                                            <ChartSeries DataSource="@OrdersbyMonthsList" XName="MonthName" YName="NumberofOrder" Type="Syncfusion.Blazor.Charts.ChartSeriesType.Line">
                                            </ChartSeries>
                                        </ChartSeriesCollection>
                                    </SfChart>
                                </ContentTemplate>
                            </DashboardLayoutPanel>


                        </DashboardLayoutPanels>
                    </SfDashboardLayout>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    #region Dashboard Değişkenleri

    SfDashboardLayout dashboardObject;
    double[] CellSpacing = new double[] { 5, 5 };
    int Columns = 6;
    double Ratio = 100 / 85;
    private Theme Theme { get; set; }
    public string[] ShapePropertyPath = { "continent" };
    public string ShapeDataPath = "Continent";

    #endregion

    public List<ShipmentData> ShipmentDataList = new List<ShipmentData>();
    public List<SelectSalesOrderLinesDto> SalesOrderLineNotShippedList = new List<SelectSalesOrderLinesDto>();
    public List<NotShippedProductGroups> NotShippedProductGroupsList = new List<NotShippedProductGroups>();
    public List<NotShippedProductGroupsTooltip> NotShippedProductGroupsTooltipList = new List<NotShippedProductGroupsTooltip>();
    public List<OrdersbyMonths> OrdersbyMonthsList = new List<OrdersbyMonths>();
    public List<SelectSalesOrderLinesDto> SalesOrderLinesList = new List<SelectSalesOrderLinesDto>();
    public List<SelectPackingListPalletPackageLinesDto> PackingListPackageLineList = new List<SelectPackingListPalletPackageLinesDto>();
    public List<OpenOrderBalances> OpenOrderBalancesList = new List<OpenOrderBalances>();

    int PlannedQuantity = 0;
    int ShipmentQuantity = 0;
    int RestQuantity = 0;

    public class ShipmentData
    {
        public string QuantityType { get; set; }
        public int Count { get; set; }
        public double Percentage { get; set; }
    }

    public class NotShippedProductGroups
    {
        public string ProductGroupName { get; set; }
        public Guid ProductGroupID { get; set; }
        public int Amount { get; set; }
    }

    public class NotShippedProductGroupsTooltip
    {
        public string OrderNo { get; set; }
        public string CurrentAccountCode { get; set; }
        public DateTime RequestedDate { get; set; }
        public Guid ProductGroupID { get; set; }
        public string ProductGroupName { get; set; }
        public int Amount { get; set; }
    }

    public class OrdersbyMonths
    {
        public int NumberofOrder { get; set; }
        public string MonthName { get; set; }
    }

    public class OpenOrderBalances
    {
        public string OrderNo { get; set; }
        public DateTime ShippingDate { get; set; }
        public int Amount { get; set; }
        public int Balance { get; set; }
        public decimal ShippingRate { get; set; }
    }



    protected override async Task OnInitializedAsync()
    {
        #region En Yakın Tarihli Yükleme

        var shipmentPlanningListDto = (await ShipmentPlanningsAppService.GetListAsync(new ListShipmentPlanningsParameterDto())).Data.ToList();
        shipmentPlanningListDto = shipmentPlanningListDto.OrderBy(t => t.ShipmentPlanningDate).ToList();

        var shipmentPlanningLineList = (await ShipmentPlanningsAppService.GetAsync(shipmentPlanningListDto[0].Id)).Data.SelectShipmentPlanningLines;

        PlannedQuantity = (int)shipmentPlanningLineList.Sum(t => t.PlannedQuantity);
        ShipmentQuantity = (int)shipmentPlanningLineList.Sum(t => t.ShipmentQuantity);
        RestQuantity = PlannedQuantity - ShipmentQuantity;

        ShipmentData shipmentDataShipment = new ShipmentData
            {
                Count = ShipmentQuantity,
                QuantityType = L["ClosestShipmentPackaged"],
                Percentage = (ShipmentQuantity / PlannedQuantity) * 100
            };
        ShipmentData shipmentDataRest = new ShipmentData
            {
                Count = RestQuantity,
                QuantityType = L["ClosestShipmentRemaining"],
                Percentage = (RestQuantity / PlannedQuantity) * 100
            };

        ShipmentDataList.Add(shipmentDataShipment);
        ShipmentDataList.Add(shipmentDataRest);

        #endregion

        #region Sevk Edilmeyen Ürün Grupları

        SalesOrderLineNotShippedList = (await SalesOrdersAppService.GetLineSelectListAsync()).Data.ToList();

        var groupedLineList = SalesOrderLineNotShippedList.GroupBy(t => new { t.ProductID, t.SalesOrderID }).Select(t => new { ProductID = t.Key.ProductID, SalesOrderID = t.Key.SalesOrderID, SalesOrderLine = t.ToList() }).ToList();

        foreach (var salesOrderLine in groupedLineList)
        {
            var productID = salesOrderLine.ProductID.GetValueOrDefault();
            var productGroupID = (await ProductsAppService.GetAsync(productID)).Data.ProductGrpID;
            var productGroup = (await ProductGroupsAppService.GetAsync(productGroupID)).Data;

            NotShippedProductGroups notShippedProductGroupModel = new NotShippedProductGroups
                {
                    ProductGroupName = productGroup.Name,
                    Amount = (int)salesOrderLine.SalesOrderLine.Sum(t => t.Quantity),
                    ProductGroupID = productGroup.Id

                };

            NotShippedProductGroupsList.Add(notShippedProductGroupModel);

            var salesOrder = (await SalesOrdersAppService.GetAsync(salesOrderLine.SalesOrderID)).Data;

            NotShippedProductGroupsTooltip tooltipModel = new NotShippedProductGroupsTooltip
                {
                    CurrentAccountCode = salesOrder.CurrentAccountCardCode,
                    OrderNo = salesOrder.FicheNo,
                    ProductGroupID = productGroup.Id,
                    ProductGroupName = productGroup.Name,
                    RequestedDate = salesOrder.CustomerRequestedDate,
                    Amount = (int)salesOrderLine.SalesOrderLine.Sum(t => t.Quantity)
                };

            NotShippedProductGroupsTooltipList.Add(tooltipModel);
        }


        #endregion

        #region Aylara Göre Sipariş Sayısı


        var salesOrderList = (await SalesOrdersAppService.GetListAsync(new ListSalesOrderParameterDto())).Data/* .Where(t => t.Date_.Year == DateTime.Today.Year) */.ToList();

        var groupedByDateList = salesOrderList.GroupBy(t => new { t.Date_.Month }).Select(t => new { Month = t.Key.Month, SalesOrder = t.ToList() }).ToList();

        foreach (var monthOrder in groupedByDateList)
        {
            string monthName = "";

            switch (monthOrder.Month)
            {
                case 1: monthName = L["Month1"]; break;
                case 2: monthName = L["Month2"]; break;
                case 3: monthName = L["Month3"]; break;
                case 4: monthName = L["Month4"]; break;
                case 5: monthName = L["Month5"]; break;
                case 6: monthName = L["Month6"]; break;
                case 7: monthName = L["Month7"]; break;
                case 8: monthName = L["Month8"]; break;
                case 9: monthName = L["Month9"]; break;
                case 10: monthName = L["Month10"]; break;
                case 11: monthName = L["Month11"]; break;
                case 12: monthName = L["Month12"]; break;
                default: break;
            }

            OrdersbyMonths ordersbyMonthsModel = new OrdersbyMonths
                {
                    MonthName = monthName,
                    NumberofOrder = monthOrder.SalesOrder.Count
                };

            OrdersbyMonthsList.Add(ordersbyMonthsModel);
        }

        #endregion


        #region Açık Sipariş Bakiyeleri

        SalesOrderLinesList = (await SalesOrdersAppService.GetLineSelectListAsync()).Data.ToList();

        PackingListPackageLineList = (await PackingListsAppService.GetLinePalletPackageListAsync()).Data.ToList();

        foreach (var package in PackingListPackageLineList)
        {
            var salesOrderLine = SalesOrderLinesList.Where(t => t.Id == package.SalesOrderLineID).FirstOrDefault();

            if (salesOrderLine != null && salesOrderLine.Id != Guid.Empty && salesOrderLine.Quantity - package.TotalAmount > 0) //Satır varsa ve bakiye 0'dan büyükse (açık sipariş senaryosu)
            {
                var salesOrder = (await SalesOrdersAppService.GetAsync(salesOrderLine.SalesOrderID)).Data;

                var packingList = (await PackingListsAppService.GetAsync(package.PackingListID)).Data;

                OpenOrderBalances openOrderBalanceModel = new OpenOrderBalances
                    {
                        OrderNo = salesOrder.FicheNo,
                        ShippingDate = packingList.LoadingDate.GetValueOrDefault(),
                        Amount = (int)salesOrderLine.Quantity,
                        Balance = (int)salesOrderLine.Quantity - (int)package.TotalAmount,
                        ShippingRate = (((int)salesOrderLine.Quantity - (int)package.TotalAmount) / (int)salesOrderLine.Quantity) * 100
                    };

                    OpenOrderBalancesList.Add(openOrderBalanceModel);
            }
        }

        OpenOrderBalancesList = OpenOrderBalancesList.OrderBy(t=>t.ShippingDate).ToList();
        

        #endregion

    }
}

<style>
    .sidebar-content {
        padding: 10px;
        width: calc(100% - 60px);
    }

    td, th {
        border-bottom: 1px solid black;
    }

    #pie, #colChart, #visitorsChart, #pieChart {
        width: 100%;
        height: 100%;
    }

    .header {
        border-bottom: 1px solid rgba(0, 0, 0, 0.12);
        height: 55px;
        position: relative;
    }

    .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header {
        padding: 10px;
        border-bottom: 2px solid #e6e9ed !important;
        height: 35px;
        margin: 0 15px 0 15px;
    }

    #sidebar-section {
        padding: 0px !important;
        border: 1px solid rgba(0, 0, 0, 0.12);
    }

    .e-bigger #search {
        display: none;
    }

    @@media (max-width: 650px) {
        .e-bigger .searchContent {
            display: none;
        }

        .information {
            right: 17% !important;
        }

        #pieChart, #colChart, #visitorsChart, #pie {
            width: 100% !important;
            height: 100% !important;
        }
    }

    @@font-face {
        font-family: "e-sb-icons";
        src: url(data:application/x-font-ttf;charset=utf-8;base64,) format("truetype");
        font-weight: normal;
        font-style: normal;
    }

    [class^="sf-icon-"],
    [class*=" sf-icon-"] {
        font-family: "e-sb-icons" !important;
        speak: none;
        font-size: 55px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    #dockSidebar {
        text-align: center;
    }

    .e-icons::before {
        font-size: 20px;
    }

    li.sidebar-item.filterHover {
        background: #eef4f7;
        border-left: 4px solid #057ece;
    }
    /* dockbar icon Style */
    .home::before {
        content: "\e718";
        font-family: "e-sb-icons";
    }

    .filter::before {
        content: "\e72a";
        font-family: "e-sb-icons";
    }

    .analyticsChart::before {
        content: "\e722";
        font-family: "e-sb-icons";
    }

    .analytics::before {
        content: "\e720";
        font-family: "e-sb-icons";
    }

    .session::before {
        content: "\e735";
        font-family: "e-sb-icons";
    }

    .profile::before {
        content: "\e730";
        font-family: "e-sb-icons";
    }

    .views::before {
        content: "\e733";
        font-family: "e-sb-icons";
    }

    .search::before {
        content: "\e728";
        font-family: "e-sb-icons";
        font-size: 14px;
        position: absolute;
        top: 5px;
        left: 12%;
        font-weight: 800;
    }

    #search:hover {
        background-color: transparent !important;
    }

    .settings::before {
        content: "\e71d";
        font-family: "e-sb-icons";
    }

    span.e-input-group.e-control-wrapper.e-ddl {
        left: 12%;
    }

    .expand::before,
    .expand::before {
        content: "\e72d";
        margin-left: 18px;
        font-family: "e-sb-icons";
        position: absolute;
        top: 12%;
    }

    .right-content {
        float: right;
        height: 55px;
        width: 100px;
    }

    #right-sidebar {
        display: none;
    }

    .e-dock.e-close span.e-text {
        display: none;
    }

    .e-dock.e-open span.e-text {
        display: inline-block;
    }

    #dockSidebar li {
        list-style-type: none;
        padding: 5px;
    }

    #dockSidebar ul {
        padding: 0px;
    }

    span.e-icons {
        line-height: 2;
    }

    .e-open .e-icons {
        margin-right: 16px;
    }

    .analysis {
        font-size: 18px;
        padding: 12px;
        text-align: left;
        vertical-align: middle;
    }

    #search {
        margin-left: 10px;
        text-indent: 8px;
    }

    .searchContent .e-input-group.e-control-wrapper.e-ddl {
        height: 28px !important;
    }

    .piecontent .content {
        display: inline-block;
        padding: 4px;
        width: 31%;
        font-size: 13px;
        text-align: center;
    }

    .card-content.text {
        font-size: 15px;
        margin-left: 5%;
        margin-top: 2%;
        color: #000000;
    }

    .card {
        margin-right: 5%;
        margin-top: 10%;
    }

    .card-content.number {
        font-size: 16px;
        text-align: right;
        padding-top: 10px;
    }

    .e-dashboardlayout.e-control.e-responsive {
        width: 100% !important;
        overflow: hidden;
    }

    .e-avatar.image {
        background-image: url("https://blazor.syncfusion.com/demos/_content/blazor_server_common_net7/images/sidebar/user.svg");
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
    }

    #target {
        background: linear-gradient(-141deg, #eef5f7 14%, #eef2fb 100%);
    }

    .markerTemplate {
        font-size: 12px;
        color: white;
        text-shadow: 0px 1px 1px black;
        font-weight: 500;
    }

    .menu {
        display: inline-block;
        position: absolute;
        width: 60px;
        height: 55px;
        border-right: 1px solid rgba(0, 0, 0, 0.12);
    }

    .searchContent {
        display: inline-block;
        position: absolute;
        left: 60px;
    }

    .e-panel-content {
        height: calc(100% - 35px) !important;
        width: 100%;
    }

    .e-dock {
        padding-top: 8px;
    }

    .right-content div {
        display: inline-block;
    }

    .information {
        top: 15%;
        font-size: 12px;
        position: absolute;
    }

        .information span {
            float: left;
        }

    .text-content {
        font-size: 17px;
        line-height: 17px;
        margin-top: 10px;
        margin-left: 10px;
    }

    .card .e-icons {
        position: absolute;
        top: 20%;
        left: 12%;
        width: 60px;
        height: 60px;
        text-align: center;
        border: 1px solid;
        line-height: 60px;
        color: #25c3cb;
        background: #eef5f7;
        border-radius: 60px;
    }

    .card .home::before {
        font-size: 25px;
    }

    .dashboardParent {
        width: 100%;
    }

    .mobile .e-control.e-lib.e-dashboardlayout.e-responsive {
        z-index: 999;
        overflow: scroll;
    }

    .mobile .e-dashboardlayout .card .e-icons {
        top: 32%;
        width: 30%;
        height: 30%;
    }

        .mobile .e-dashboardlayout .card .e-icons::before {
            font-size: 25px;
            top: 10%;
            left: 33%;
            position: absolute;
        }

    .mobile .e-dashboardlayout .card-content.number {
        top: 50%;
        left: 55%;
        position: absolute;
        font-size: 25px;
    }

    .mobile .e-dashboardlayout .card-content.text {
        top: 26%;
        left: 55%;
        position: absolute;
        font-size: 25px;
    }

    .mobile #dockSidebar {
        z-index: auto !important;
    }

    .e-control.e-sidebar.e-lib.e-dock.e-left.e-sidebar-absolute.e-transition.e-close.e-over.e-touch {
        z-index: 99;
    }
</style>







