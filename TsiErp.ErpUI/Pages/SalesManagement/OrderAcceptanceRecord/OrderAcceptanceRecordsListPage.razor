@page "/order-acceptance-records"
@using TsiErp.ErpUI.Models;
@layout MainLayout




@inherits BaseListPage<SelectOrderAcceptanceRecordsDto, ListOrderAcceptanceRecordsDto, CreateOrderAcceptanceRecordsDto, UpdateOrderAcceptanceRecordsDto, ListOrderAcceptanceRecordsParameterDto>

@inject IStringLocalizer<OrderAcceptanceRecordsResource> L
@inject IOrderAcceptanceRecordsAppService OrderAcceptanceRecordsAppService
@inject ICurrentAccountCardsAppService CurrentAccountCardsAppService
@inject IProductsAppService ProductsAppService
@inject IProductReferanceNumbersAppService ProductReferanceNumbersAppService
@inject ICurrenciesAppService CurrenciesAppService
@inject IUnitSetsAppService UnitSetsAppService
@inject ISalesPricesAppService SalesPricesAppService
@inject IFicheNumbersAppService FicheNumbersAppService
@inject IPurchasePricesAppService PurchasePricesAppService
@inject IExcelService ExcelService
@inject IShippingAdressesAppService ShippingAdressesAppService
@inject IProductsAppService ProductsAppService
@inject ISalesOrdersAppService SalesOrdersAppService
@inject IUserPermissionsAppService UserPermissionsAppService
@inject IBillsofMaterialsAppService BillsofMaterialsAppService
@inject IGrandTotalStockMovementsAppService GrandTotalStockMovementsAppService
@inject IPurchaseManagementParametersAppService PurchaseManagementParametersAppService
@inject IBranchesAppService BranchesAppService
@inject IWarehousesAppService WarehousesAppService
@inject IMRPsAppService MRPsService
@inject IMenusAppService MenusAppService
@inject IGetSQLDateAppService GetSQLDateAppService
@inject IRoutesAppService RoutesAppService
@inject IBillsofMaterialsAppService BillsofMaterialsAppService
@inject ISalesManagementParametersAppService SalesManagementParametersAppService
@inject IPaymentPlansAppService PaymentPlansAppService

@if (!base.IsLoaded)
{
    <CircleLoading Caption="@base.LoadingCaption" Text="@base.LoadingText" />
}
else
{
    <DevGridLayout ColumnCount="1" RowCount="3" RowHeights="@RowHeights("*")">
        <GridLayoutItems>
            <DxGridLayoutItem Row="0" Column="0" ColumnSpan="1">
                <Template>
                    <SfCard class="TSIListPageTitleCard">
                        <CardContent>
                            <TsiBreadCrumb PreviousMenus="@L["UIPreviousMenu"]" CurrentMenu="@L["UICurrentMenu"]" />
                        </CardContent>
                        <CardFooter>
                        </CardFooter>
                    </SfCard>
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Row="2" Column="0" ColumnSpan="1">
                <Template>
                    <SfCard class="TSIGridCards">

                        <CardContent>
                            <SfGrid ID="Grid" @ref="_grid"  AllowPdfExport=true ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@ListDataSource" AllowPaging="false" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowSelection="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSorting="true" Height="100%" Width="100%" class="GridZebra" ContextMenuItems="@MainGridContextMenu" Toolbar=@GridToolbarItems>
                                <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                <GridEvents ContextMenuItemClicked="@MainContextMenuClick" OnToolbarClick="@ToolbarClickHandler" TValue="ListOrderAcceptanceRecordsDto"></GridEvents>
                                <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridPageSettings PageSizes="true"></GridPageSettings>
                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(ListOrderAcceptanceRecordsDto.Code) HeaderText="@L["Code"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>

                                    <GridColumn Field=@nameof(ListOrderAcceptanceRecordsDto.Date_) Format="dd.MM.yyyy" Type="ColumnType.DateTime" HeaderText="@L["Date_"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(ListOrderAcceptanceRecordsDto.CurrentAccountCardName) HeaderText="@L["CurrentAccountCardName"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(ListOrderAcceptanceRecordsDto.CustomerOrderNo) HeaderText="@L["CustomerOrderNo"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(ListOrderAcceptanceRecordsDto.CustomerRequestedDate) Format="dd.MM.yyyy" Type="ColumnType.DateTime" HeaderText="@L["CustomerRequestedDate"]" TextAlign="TextAlign.Center" Width="300"></GridColumn>
                                    <GridColumn Field=@nameof(ListOrderAcceptanceRecordsDto.ConfirmedLoadingDate) Format="dd.MM.yyyy" Type="ColumnType.DateTime" HeaderText="@L["ConfirmedLoadingDate"]" TextAlign="TextAlign.Center" Width="300"></GridColumn>
                                    <GridColumn Field=@nameof(ListOrderAcceptanceRecordsDto.ProductionOrderLoadingDate) Format="dd.MM.yyyy" Type="ColumnType.DateTime" HeaderText="@L["ProductionOrderLoadingDate"]" TextAlign="TextAlign.Center" Width="300"></GridColumn>
                                    <GridColumn Field=@nameof(ListOrderAcceptanceRecordsDto.PaymentPlanName) Type="ColumnType.Number" HeaderText="@L["PaymentPlanName"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(ListOrderAcceptanceRecordsDto.OrderAcceptanceRecordState) HeaderText="@L["OrderAcceptanceRecordState"]" TextAlign="TextAlign.Center" Width="220">
                                        <Template>
                                            @{
                                                OrderAcceptanceRecordStateEnum? status = (context as ListOrderAcceptanceRecordsDto).OrderAcceptanceRecordState;
                                                string statusStr = "";

                                                switch (status)
                                                {
                                                    case OrderAcceptanceRecordStateEnum.Beklemede: statusStr = L["EnumPending"]; break;
                                                    case OrderAcceptanceRecordStateEnum.TeknikOnayVerildi: statusStr = L["EnumTechnicalApproval"]; break;
                                                    case OrderAcceptanceRecordStateEnum.SiparisFiyatOnayiVerildi: statusStr = L["EnumOrderApproval"]; break;
                                                    case OrderAcceptanceRecordStateEnum.SiparisOlusturuldu: statusStr = L["EnumOrderCreated"]; break;
                                                    default: break;
                                                }
                                            }
                                            @statusStr
                                        </Template>
                                    </GridColumn>


                                </GridColumns>
                            </SfGrid>
                        </CardContent>
                        <CardFooter>
                        </CardFooter>
                    </SfCard>
                </Template>
            </DxGridLayoutItem>
        </GridLayoutItems>
    </DevGridLayout>


    <DxPopup @bind-Visible="base.EditPageVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["EditModalTitle"]"
             Width="48%"
             Height="65%"
             MinWidth="925px"
             MinHeight="700px"
             HeaderCssClass="HeaderTitleCss"
             Showing="CrudModalShowing"
             Closing="CrudModalClosing">

        <BodyTemplate>
            <DxGridLayout CssClass="TSIGridLayoutHeight88">

                <Rows>
                    <DxGridLayoutRow Height="11%" />
                    <DxGridLayoutRow Height="11%" />
                    <DxGridLayoutRow Height="11%" />
                    <DxGridLayoutRow Height="11%" />
                    <DxGridLayoutRow Height="11%" />
                    <DxGridLayoutRow Height="37%" />
                    <DxGridLayoutRow Height="5%" />
                </Rows>

                <Columns>
                    <DxGridLayoutColumn Width="3%" />
                    <DxGridLayoutColumn Width="21%" />
                    <DxGridLayoutColumn Width="3%" />
                    <DxGridLayoutColumn Width="21%" />
                    <DxGridLayoutColumn Width="3%" />
                    <DxGridLayoutColumn Width="21%" />
                    <DxGridLayoutColumn Width="3%" />
                    <DxGridLayoutColumn Width="21%" />
                    <DxGridLayoutColumn Width="3%" />
                </Columns>

                <Items>
                    <DxGridLayoutItem Row="0" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CodeLabel"] </strong></label>
                            <SfTextBox @ref="@CodeButtonEdit" Created="@CodeOnCreateIcon" @bind-Value="DataSource.Code" ShowClearButton=true></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>
                    <DxGridLayoutItem Row="0" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CurrentAccountCardCodeLabel"] </strong></label>
                            <SfTextBox @ref="@CurrentAccountCardsCodeButtonEdit" Created="@CurrentAccountCardsCodeOnCreateIcon" @bind-Value="DataSource.CurrentAccountCardCode" ShowClearButton=true ValueChange="CurrentAccountCardsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="0" Column="5">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CurrentAccountCardCustomerCodeLabel"] </strong></label><br />
                            <SfTextBox Enabled=false @bind-Value="DataSource.CurrentAccountCardCustomerCode"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="0" RowSpan="1" Column="7">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["Description_Label"]</strong></label><br />
                            <SfTextBox CssClass="TSIMemoBox120" Multiline=false @bind-Value="@DataSource.Description_"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["Date_Label"] </strong></label>
                            <SfDatePicker @bind-Value="DataSource.Date_"></SfDatePicker>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CurrentAccountCardNameLabel"] </strong></label><br />
                            <SfTextBox @ref="@CurrentAccountCardsNameButtonEdit" Created="@CurrentAccountCardsNameOnCreateIcon" @bind-Value="DataSource.CurrentAccountCardName" ShowClearButton=true ValueChange="CurrentAccountCardsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="5">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CustomerOrderNoLabel"] </strong></label>
                            <SfTextBox @bind-Value="DataSource.CustomerOrderNo"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CustomerRequestedDateLabel"] </strong></label>
                            <SfDatePicker @bind-Value="DataSource.CustomerRequestedDate"></SfDatePicker>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CurrenyCodeLabel"] </strong></label><br />
                            <SfTextBox Enabled=false @bind-Value="DataSource.CurrenyCode"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="3" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["ProductionOrderLoadingDateLabel"] </strong></label>
                            <SfDatePicker @bind-Value="DataSource.ProductionOrderLoadingDate"></SfDatePicker>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="3" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["ExchangeRateAmountLabel"] </strong></label>
                            <SfNumericTextBox Min="1" TValue="decimal" @bind-Value="DataSource.ExchangeRateAmount"></SfNumericTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="4" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["PaymentPlanNameLabel"]</strong></label>
                            <SfTextBox @ref="@PaymentPlansButtonEdit" Created="@PaymentPlansOnCreateIcon" @bind-Value="DataSource.PaymentPlanName" ShowClearButton=true ValueChange="PaymentPlansOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="4" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["ConfirmedLoadingDateLabel"] </strong></label>
                            <SfDatePicker @bind-Value="DataSource.ConfirmedLoadingDate"></SfDatePicker>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="5" RowSpan="4" ColumnSpan="7">
                        <Template>
                            <SfUploader AutoUpload="false">
                                <UploaderEvents ValueChange="OnChange"></UploaderEvents>
                            </SfUploader>
                        </Template>
                    </DxGridLayoutItem>

                    <br/>
                    <DxGridLayoutItem Row="5" Column="1" ColumnSpan="7">
                        <Template>
                            <SfGrid @ref=_VirtualLineGrid ID="VirtualLineGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@GridVirtualLineList" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="false" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra" ContextMenuItems="@LineGridContextMenu">
                                <GridEvents ContextMenuItemClicked="@OnListContextMenuClick" TValue="VirtualLineModel"></GridEvents>
                                <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(VirtualLineModel.IsProductExists) DisplayAsCheckBox=true HeaderText=" " TextAlign="TextAlign.Center" Width="40"></GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.ProductCode) HeaderText="@L["LineGridProductCode"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.OrderReferanceNo) HeaderText="@L["LineGridOrderReferanceNo"]" TextAlign="TextAlign.Center" Width="220" Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);

                                                if (orderAcceptanceLine.IsProductExists)
                                                {

                                                    var orderRefNo = ProductReferanceNumbersList.Where(t => t.ProductID == orderAcceptanceLine.ProductID).Select(t => t.ReferanceNo).FirstOrDefault();

                                                    if (orderRefNo != orderAcceptanceLine.OrderReferanceNo)
                                                    {
                                                        <div style="background-color : #FF1818;width: 100%;height: 100%;">@orderAcceptanceLine.OrderReferanceNo</div>
                                                    }
                                                    else
                                                    {
                                                        <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.OrderReferanceNo</div>
                                                    }
                                                }
                                                else                                  
                                                {
                                                    <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.OrderReferanceNo</div>
                                                }

                                            }

                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.CustomerReferanceNo) HeaderText="@L["LineGridCustomerReferanceNo"]" TextAlign="TextAlign.Center" Width="240" Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);

                                                if (orderAcceptanceLine.IsProductExists)
                                                {

                                                    var customerRefRefNo = ProductReferanceNumbersList.Where(t => t.ProductID == orderAcceptanceLine.ProductID).Select(t => t.CustomerReferanceNo).FirstOrDefault();

                                                    if (customerRefRefNo != orderAcceptanceLine.CustomerReferanceNo)
                                                    {
                                                        <div style="background-color : #FF1818;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerReferanceNo</div>
                                                    }
                                                    else
                                                    {
                                                        <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerReferanceNo</div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerReferanceNo</div>
                                                }

                                            }

                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.CustomerBarcodeNo) HeaderText="@L["LineGridCustomerBarcodeNo"]" TextAlign="TextAlign.Center" Width="240" Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);

                                                if (orderAcceptanceLine.IsProductExists)
                                                {

                                                    var customerBarcodeRefNo = ProductReferanceNumbersList.Where(t => t.ProductID == orderAcceptanceLine.ProductID).Select(t => t.CustomerBarcodeNo).FirstOrDefault();

                                                    if (customerBarcodeRefNo != orderAcceptanceLine.CustomerBarcodeNo)
                                                    {
                                                        <div style="background-color : #FF1818;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerBarcodeNo</div>
                                                    }
                                                    else
                                                    {
                                                        <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerBarcodeNo</div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerBarcodeNo</div>
                                                }

                                            }

                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.MinOrderAmount) Format="N2" Type="ColumnType.Number" HeaderText="@L["LineGridMinOrderAmount"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>

                                    <GridColumn Field=@nameof(VirtualLineModel.OrderAmount) Format="N2" Type="ColumnType.Number" HeaderText="@L["LineGridOrderAmount"]" TextAlign="TextAlign.Center" Width="220" Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);

                                                if (orderAcceptanceLine.MinOrderAmount > orderAcceptanceLine.OrderAmount)
                                                {
                                                    <div style="background-color : #FF1818;width: 100%;height: 100%;">@orderAcceptanceLine.OrderAmount.ToString("N2")</div>
                                                }
                                                else
                                                {
                                                    <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.OrderAmount.ToString("N2")</div>
                                                }
                                            }

                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.UnitSetCode)  HeaderText="@L["LineGridUnitSetCode"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.DefinedUnitPrice) Format="N2" Type="ColumnType.Number" HeaderText="@L["LineGridDefinedUnitPrice"]" TextAlign="TextAlign.Center" Width="220" Visible=@LoginedUserService.SalesManagementShowAmountsChildMenu></GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.OrderUnitPrice) Format="N2" Type="ColumnType.Number" HeaderText="@L["LineGridOrderUnitPrice"]" TextAlign="TextAlign.Center" Width="240" Visible=@LoginedUserService.SalesManagementShowAmountsChildMenu Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);

                                                if (orderAcceptanceLine.DefinedUnitPrice > orderAcceptanceLine.OrderUnitPrice)
                                                {
                                                    <div style="background-color : #FF1818;width: 100%;height: 100%;">@orderAcceptanceLine.OrderUnitPrice.ToString("N2")</div>
                                                }
                                                else if (orderAcceptanceLine.DefinedUnitPrice == orderAcceptanceLine.OrderUnitPrice)
                                                {
                                                    <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.OrderUnitPrice.ToString("N2")</div>
                                                }
                                                else if (orderAcceptanceLine.DefinedUnitPrice < orderAcceptanceLine.OrderUnitPrice)
                                                {
                                                    <div style="background-color : #26D514;width: 100%;height: 100%;">@orderAcceptanceLine.OrderUnitPrice.ToString("N2")</div>
                                                }
                                            }

                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.LineAmount) Format="N2" Type="ColumnType.Number" HeaderText="@L["LineGridLineAmount"]" TextAlign="TextAlign.Center" Width="220" Visible=@LoginedUserService.SalesManagementShowAmountsChildMenu></GridColumn>

                                    <GridColumn Field=@nameof(VirtualLineModel.Description_) HeaderText="@L["LineGridDescription_"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </Template>
                    </DxGridLayoutItem>

                </Items>
            </DxGridLayout>
        </BodyTemplate>
        <FooterContentTemplate>
            <SfButton CssClass="TSISaveButton" OnClick="OnSubmit"><SfIcon Size="IconSize.Medium" Name="IconName.Save"></SfIcon>&nbsp;@L["SaveButton"]</SfButton>
            <SfButton CssClass="TSICancelButton" OnClick="HideEditPage"><SfIcon Size="IconSize.Medium" Name="IconName.Undo"></SfIcon>&nbsp;@L["CloseButton"]</SfButton>
        </FooterContentTemplate>
    </DxPopup>


    <DxPopup @bind-Visible="VirtualLineCrudPopup"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["LinePopupTitle"]"
             Width="53%"
             Height="47%"
             MinWidth="910px"
             MinHeight="500px"
             HeaderCssClass="HeaderTitleCss">

        <BodyTemplate>
            <DxGridLayout CssClass="TSIGridLayout">

                <Rows>
                    <DxGridLayoutRow Height="20%" />
                    <DxGridLayoutRow Height="17%" />
                    <DxGridLayoutRow Height="17%" />
                    <DxGridLayoutRow Height="17%" />
                    <DxGridLayoutRow Height="17%" />
                </Rows>

                <Columns>
                    <DxGridLayoutColumn Width="4%" />
                    <DxGridLayoutColumn Width="27%" />
                    <DxGridLayoutColumn Width="4%" />
                    <DxGridLayoutColumn Width="27%" />
                    <DxGridLayoutColumn Width="4%" />
                    <DxGridLayoutColumn Width="27%" />
                    <DxGridLayoutColumn Width="4%" />
                </Columns>

                <Items>
                    <DxGridLayoutItem Row="0" Column="1">
                        <Template>
                            <br />
                            <label class="TSIModalLabel"><strong>@L["ProductCodeLineLabel"] </strong></label>
                            <SfTextBox @ref="@ProductsCodeButtonEdit" Created="@ProductsCodeOnCreateIcon" @bind-Value="VirtualLineDataSource.ProductCode" ShowClearButton=true ValueChange="ProductsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="0" Column="3">
                        <Template>
                            <br />
                            <label class="TSIModalLabel"><strong>@L["OrderReferanceNoLineLabel"] </strong></label>
                            <SfTextBox @bind-Value="VirtualLineDataSource.OrderReferanceNo" Enabled=false></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="0" Column="5">
                        <Template>
                            <br />
                            <label class="TSIModalLabel"><strong>@L["CustomerReferanceNoLineLabel"] </strong></label>
                            <SfTextBox @bind-Value="VirtualLineDataSource.CustomerReferanceNo" Enabled=false></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CustomerBarcodeNoLineLabel"] </strong></label>
                            <SfTextBox @bind-Value="VirtualLineDataSource.CustomerBarcodeNo" Enabled=false></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["MinOrderAmountLineLabel"] </strong></label><br />
                            <SfNumericTextBox Min="0" Enabled=false TValue="decimal" Format="N2" @bind-Value="VirtualLineDataSource.MinOrderAmount"></SfNumericTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="5">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["OrderAmountLineLabel"] </strong></label><br />
                            <SfNumericTextBox Min="0" TValue="decimal" @bind-Value="VirtualLineDataSource.OrderAmount">
                                <NumericTextBoxEvents TValue="decimal" ValueChange="@OrderValueChangeHandler"></NumericTextBoxEvents>
                            </SfNumericTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["UnitSetCodeLineLabel"] </strong></label>
                            <SfTextBox @bind-Value="VirtualLineDataSource.UnitSetCode" Enabled=false></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["DefinedUnitPriceLineLabel"] </strong></label><br />
                            <SfNumericTextBox Min="0" Enabled=false TValue="decimal" @bind-Value="VirtualLineDataSource.DefinedUnitPrice"></SfNumericTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="5">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["OrderUnitPriceLineLabel"] </strong></label><br />
                            <SfNumericTextBox Min="0" TValue="decimal" @bind-Value="VirtualLineDataSource.OrderUnitPrice">
                                <NumericTextBoxEvents TValue="decimal" ValueChange="@OrderValueChangeHandler"></NumericTextBoxEvents>
                            </SfNumericTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="3" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["LineAmountLineLabel"] </strong></label><br />
                            <SfNumericTextBox Min="0" Enabled=false TValue="decimal" @bind-Value="VirtualLineDataSource.LineAmount"></SfNumericTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="4" Column="1" ColumnSpan="5">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["Description_LineLabel"] </strong></label>
                            <SfTextBox Multiline=true CssClass="TSIMemoBox60" @bind-Value="VirtualLineDataSource.Description_"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>


                </Items>
            </DxGridLayout>
        </BodyTemplate>
        <FooterContentTemplate>
            <SfButton CssClass="TSISaveButton" OnClick="OnLineSubmit"><SfIcon Size="IconSize.Medium" Name="IconName.Save"></SfIcon>&nbsp;@L["SaveButton"]</SfButton>
            <SfButton CssClass="TSICancelButton" OnClick="HideLinesPopup"><SfIcon Size="IconSize.Medium" Name="IconName.Undo"></SfIcon>&nbsp;@L["CloseButton"]</SfButton>
        </FooterContentTemplate>
    </DxPopup>


    <DxPopup @bind-Visible="@ConvertToOrderCrudPopup"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["EditConverttoOrderModalTitle"]"
             Width="65%"
             Height="47%"
             MinWidth="1100px"
             MinHeight="510px"
             HeaderCssClass="HeaderTitleCss">

        <BodyTemplate>
            <DxGridLayout CssClass="TSIGridLayout">

                <Rows>
                    <DxGridLayoutRow Height="20%" />
                    <DxGridLayoutRow Height="1%" />
                    <DxGridLayoutRow Height="70%" />
                </Rows>

                <Columns>
                    <DxGridLayoutColumn Width="3%" />
                    <DxGridLayoutColumn Width="15%" />
                    <DxGridLayoutColumn Width="3%" />
                    <DxGridLayoutColumn Width="49%" />
                    <DxGridLayoutColumn Width="3%" />
                    <DxGridLayoutColumn Width="23%" />
                    <DxGridLayoutColumn Width="3%" />
                </Columns>

                <Items>

                    <DxGridLayoutItem Row="0" Column="5">
                        <Template>
                            <br />
                            <SfProgressButton Content="Siparişe Dönüştür" CssClass="TSISaveButton" IconCss="e-icons e-save" EnableProgress="true" OnClick="OnConvertToOrderBtnClicked" @ref="ProgressBtn">
                                <ProgressButtonSpinSettings Position="SpinPosition.Right" Width="20">
                                    <SpinTemplate>
                                        <div class="TSIProgressSaveBtnSpinner"></div>
                                    </SpinTemplate>
                                </ProgressButtonSpinSettings>
                            </SfProgressButton>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="1" ColumnSpan="5">
                        <Template>
                            <SfGrid @ref=_ConvertToOrderGrid ID="ConvertToOrderGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@GridConvertToOrderList" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="false" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(SelectOrderAcceptanceRecordLinesDto.ProductCode) HeaderText="@L["OrderGridProductCode"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(SelectOrderAcceptanceRecordLinesDto.OrderReferanceNo) HeaderText="@L["OrderGridOrderReferanceNo"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(SelectOrderAcceptanceRecordLinesDto.CustomerReferanceNo) HeaderText="@L["OrderGridCustomerReferanceNo"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(SelectOrderAcceptanceRecordLinesDto.CustomerBarcodeNo) HeaderText="@L["OrderGridCustomerBarcodeNo"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(SelectOrderAcceptanceRecordLinesDto.MinOrderAmount) Format="N2" Type="ColumnType.Number" HeaderText="@L["OrderGridMinOrderAmount"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(SelectOrderAcceptanceRecordLinesDto.OrderAmount) Format="N2" Type="ColumnType.Number" HeaderText="@L["OrderGridOrderAmount"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(SelectOrderAcceptanceRecordLinesDto.UnitSetCode) HeaderText="@L["OrderGridUnitSetCode"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(SelectOrderAcceptanceRecordLinesDto.DefinedUnitPrice) Format="N2" Type="ColumnType.Number" HeaderText="@L["OrderGridDefinedUnitPrice"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(SelectOrderAcceptanceRecordLinesDto.OrderUnitPrice) Format="N2" Type="ColumnType.Number" HeaderText="@L["OrderGridOrderUnitPrice"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(SelectOrderAcceptanceRecordLinesDto.LineAmount) Format="N2" Type="ColumnType.Number" HeaderText="@L["OrderGridLineAmount"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    
                                </GridColumns>
                            </SfGrid>
                        </Template>
                    </DxGridLayoutItem>
                </Items>
            </DxGridLayout>
        </BodyTemplate>
        <FooterContentTemplate>
            <SfButton CssClass="TSICancelButton" OnClick="HideConvertToOrderPopup" Disabled=@HideCreateProductionOrderPopupButtonDisabled><SfIcon Size="IconSize.Medium" Name="IconName.Undo"></SfIcon>&nbsp;@L["CloseButton"]</SfButton>
        </FooterContentTemplate>
    </DxPopup>

    <DxPopup @bind-Visible="MRPCrudModalVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["MRPModalTitle"]"
             Width="62%"
             Height="65%"
             MinWidth="1060px"
             MinHeight="700px"
             HeaderCssClass="HeaderTitleCss">

        <BodyTemplate>
            <DxGridLayout CssClass="TSIGridLayout">

                <Rows>
                    <DxGridLayoutRow Height="12%" />
                    <DxGridLayoutRow Height="9%" />
                    <DxGridLayoutRow Height="9%" />
                    <DxGridLayoutRow Height="9%" />
                    <DxGridLayoutRow Height="10%" />
                    <DxGridLayoutRow Height="50%" />
                </Rows>

                <Columns>
                    <DxGridLayoutColumn Width="5%" />
                    <DxGridLayoutColumn Width="15%" />
                    <DxGridLayoutColumn Width="5%" />
                    <DxGridLayoutColumn Width="45%" />
                    <DxGridLayoutColumn Width="24%" />
                    <DxGridLayoutColumn Width="5%" />
                </Columns>

                <Items>
                    <DxGridLayoutItem Row="0" Column="1">
                        <Template>
                            <br />
                            <label class="TSIModalLabel"><strong>@L["MRPCodeLabel"] </strong></label>

                            <SfTextBox @ref="@MRPCodeButtonEdit" Created="@MRPCodeOnCreateIcon" @bind-Value="MRPDataSource.Code" ShowClearButton=true></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="0" Column="3" RowSpan="3">
                        <Template>
                            <br />
                            <label class="TSIModalLabel"><strong>@L["MRPDescription_Label"] </strong></label>
                            <SfTextBox Multiline=true CssClass="TSIMemoBox60" @bind-Value="MRPDataSource.Description_"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["MRPDate_Label"] </strong></label><br />
                            <SfDatePicker @bind-Value="MRPDataSource.Date_"></SfDatePicker>
                        </Template>
                    </DxGridLayoutItem>
                    <DxGridLayoutItem Row="2" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["MRPState_Label"] </strong></label><br />
                            <SfTextBox @bind-Value="MRPDataSource.State_" CssClass="TSITxtBox"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="3" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["MRPBranchCodeButtonEditLabel"] </strong></label><br />
                            <SfTextBox @ref="@BranchesButtonEdit" Created="@BranchesOnCreateIcon" @bind-Value="BranchCodeButtonEdit" ShowClearButton=true ValueChange="BranchesOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="4" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["MRPWarehouseCodeButtonEditLabel"] </strong></label><br />
                            <SfTextBox @ref="@WarehousesButtonEdit" Created="@WarehousesOnCreateIcon" @bind-Value="WarehouseCodeButtonEdit" ShowClearButton=true ValueChange="WarehousesOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="4" Column="3">
                        <Template>
                            <center>
                                <label class="TSIModalLabel"><strong>@L["MRPIsMaintenanceMRPLabel"] </strong></label><br />
                                <SfSwitch Disabled=true @bind-Checked="MRPDataSource.IsMaintenanceMRP"></SfSwitch>
                            </center>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="4" Column="4">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["MRPReferanceDateLabel"] </strong></label><br />
                            <SfDatePicker TValue="DateTime" @bind-Value="MRPDataSource.ReferanceDate">
                                <DatePickerEvents TValue="DateTime" ValueChange="ReferanceDateValueChangeHandler"></DatePickerEvents>
                            </SfDatePicker>
                        </Template>
                    </DxGridLayoutItem>




                    <DxGridLayoutItem Row="5" Column="1" ColumnSpan="4">
                        <Template>
                            <SfGrid @ref=_MRPLineGrid ID="MRPLineGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@MRPLinesList" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="false" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra" ContextMenuItems="@MRPLineGridContextMenu">
                                <GridEvents ContextMenuItemClicked="@OnMRPListContextMenuClick" TValue="SelectMRPLinesDto"></GridEvents>
                                <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(SelectMRPLinesDto.isCalculated) DisplayAsCheckBox="true" HeaderText="@L["MRPLineGridSalesOrderisCalculated"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    @* <GridColumn Field=@nameof(SelectMRPLinesDto.isPurchase) DisplayAsCheckBox="true" HeaderText="@L["MRPLineGridSalesOrderisPurchase"]" TextAlign="TextAlign.Center" Width="240"></GridColumn> *@
                                    <GridColumn Field=@nameof(SelectMRPLinesDto.isStockUsage) DisplayAsCheckBox="true" HeaderText="@L["MRPLineGridSalesOrderisStockUsage"]" TextAlign="TextAlign.Center" Width="240"></GridColumn>
                                    @*  <GridColumn Field=@nameof(SelectMRPLinesDto.SalesOrderFicheNo) HeaderText="@L["MRPLineGridSalesOrderFicheNo"]" TextAlign="TextAlign.Center" Width="240"></GridColumn> *@
                                    <GridColumn Field=@nameof(SelectMRPLinesDto.ProductCode) HeaderText="@L["MRPLineGridProductCode"]" TextAlign="TextAlign.Center" Width="200"></GridColumn>
                                    <GridColumn Field=@nameof(SelectMRPLinesDto.UnitSetCode) HeaderText="@L["MRPLineGridUnitSetCode"]" TextAlign="TextAlign.Center" Width="200"></GridColumn>

                                    <GridColumn Field=@nameof(SelectMRPLinesDto.BranchCode) HeaderText="@L["MRPLineGridBranchCode"]" TextAlign="TextAlign.Center" Width="200"></GridColumn>
                                    <GridColumn Field=@nameof(SelectMRPLinesDto.WarehouseCode) HeaderText="@L["MRPLineGridWarehouseCode"]" TextAlign="TextAlign.Center" Width="200"></GridColumn>

                                    <GridColumn Field=@nameof(SelectMRPLinesDto.AmountOfStock) HeaderText="@L["MRPLineGridAmountOfStock"]" TextAlign="TextAlign.Center" Width="280" Format="N2"></GridColumn>
                                    <GridColumn Field=@nameof(SelectMRPLinesDto.Amount) Format="N2" Type="ColumnType.Number" HeaderText="@L["MRPLineGridAmount"]" TextAlign="TextAlign.Center" Width="280"></GridColumn>
                                    <GridColumn Field=@nameof(SelectMRPLinesDto.RequirementAmount) Format="N2" Type="ColumnType.Number" HeaderText="@L["MRPLineGridRequirementAmount"]" TextAlign="TextAlign.Center" Width="280"></GridColumn>
                                    <GridColumn Field=@nameof(SelectMRPLinesDto.ReservedAmount) Type="ColumnType.Number" Format="N2" HeaderText="@L["MRPLineGridReservedAmount"]" TextAlign="TextAlign.Center" Width="280"></GridColumn>
                                    <GridColumn Field=@nameof(SelectMRPLinesDto.UnitPrice) Type="ColumnType.Number" Format="N2" HeaderText="@L["SupplierPopupGridUnitPrice"]" TextAlign="TextAlign.Center" Width="280"></GridColumn>
                                    <GridColumn Field=@nameof(SelectMRPLinesDto.CurrentAccountCardName) HeaderText="@L["SupplierPopupGridCurrentAccountName"]" TextAlign="TextAlign.Center" Width="280"></GridColumn>
                                    <GridColumn Field=@nameof(SelectMRPLinesDto.CurrencyCode) HeaderText="@L["SupplierPopupGridCurrenyCode"]" TextAlign="TextAlign.Center" Width="280"></GridColumn>  <GridColumn Field=@nameof(SelectMRPLinesDto.SupplyDate) Format="dd.MM.yyyy" Type="ColumnType.DateTime" HeaderText="@L["MRPLineGridSupplyDate"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </Template>
                    </DxGridLayoutItem>


                </Items>
            </DxGridLayout>
        </BodyTemplate>
        <FooterContentTemplate>
            <SfButton CssClass="TSISaveButton" OnClick="OnMRPSubmit"><SfIcon Size="IconSize.Medium" Name="IconName.Save"></SfIcon>&nbsp;@L["SaveButton"]</SfButton>
            <SfButton CssClass="TSICancelButton" OnClick="HideMRPPopup"><SfIcon Size="IconSize.Medium" Name="IconName.Undo"></SfIcon>&nbsp;@L["CloseButton"]</SfButton>
        </FooterContentTemplate>
    </DxPopup>

    <DxPopup @bind-Visible="OrderAcceptanceControlPopup"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["ControlModalTitle"]"
             Width="62%"
             Height="65%"
             MinWidth="1060px"
             MinHeight="700px"
             HeaderCssClass="HeaderTitleCss">

        <BodyTemplate>
            <DxGridLayout CssClass="TSIGridLayoutHeight90">

                <Rows>
                    <DxGridLayoutRow Height="5%" />
                    <DxGridLayoutRow Height="10%" />
                    <DxGridLayoutRow Height="19%" />
                    <DxGridLayoutRow Height="60%" />
                </Rows>

                <Columns>
                    <DxGridLayoutColumn Width="2%" />
                    <DxGridLayoutColumn Width="96%" />
                    <DxGridLayoutColumn Width="2%" />
                </Columns>

                <Items>
                    <br />
                    <DxGridLayoutItem Row="0" Column="1">
                        <Template>
                            <SfUploader AutoUpload="false">
                                <UploaderEvents ValueChange="ControlOnChange"></UploaderEvents>
                            </SfUploader>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="3" Column="1">
                        <Template>
                            <SfGrid @ref=_VirtualLineGrid ID="VirtualLineGrid2" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@GridVirtualLineList" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="false" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(VirtualLineModel.IsProductExists) DisplayAsCheckBox=true HeaderText=" " TextAlign="TextAlign.Center" Width="40" Context="OrderAcceptanceLineContext">
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.ProductCode) HeaderText="@L["LineGridProductCode"]" TextAlign="TextAlign.Center" Width="180" Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);
                                                if (DataSource.SelectOrderAcceptanceRecordLines.Any(t => t.ProductCode == orderAcceptanceLine.ProductCode))
                                                {
                                                    <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.ProductCode</div>
                                                }
                                                else
                                                {
                                                    <div style="background-color :  #D5CF14 ;width: 100%;height: 100%;">@orderAcceptanceLine.ProductCode</div>
                                                }

                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.OrderReferanceNo) HeaderText="@L["LineGridOrderReferanceNo"]" TextAlign="TextAlign.Center" Width="220" Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);

                                                if (DataSource.SelectOrderAcceptanceRecordLines.Any(t => t.ProductCode == orderAcceptanceLine.ProductCode))
                                                {
                                                    if (orderAcceptanceLine.IsProductExists)
                                                    {

                                                        var orderRefNo = ProductReferanceNumbersList.Where(t => t.ProductID == orderAcceptanceLine.ProductID).Select(t => t.OrderReferanceNo).FirstOrDefault();

                                                        if (orderRefNo != orderAcceptanceLine.OrderReferanceNo)
                                                        {
                                                            <div style="background-color : #FF1818;width: 100%;height: 100%;">@orderAcceptanceLine.OrderReferanceNo</div>
                                                        }
                                                        else
                                                        {
                                                            <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.OrderReferanceNo</div>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.OrderReferanceNo</div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div style="background-color : #D5CF14 ;width: 100%;height: 100%;">@orderAcceptanceLine.OrderReferanceNo</div>
                                                }


                                            }

                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.CustomerReferanceNo) HeaderText="@L["LineGridCustomerReferanceNo"]" TextAlign="TextAlign.Center" Width="240" Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);

                                                if (DataSource.SelectOrderAcceptanceRecordLines.Any(t => t.ProductCode == orderAcceptanceLine.ProductCode))
                                                {
                                                    if (orderAcceptanceLine.IsProductExists)
                                                    {

                                                        var customerRefRefNo = ProductReferanceNumbersList.Where(t => t.ProductID == orderAcceptanceLine.ProductID).Select(t => t.CustomerReferanceNo).FirstOrDefault();

                                                        if (customerRefRefNo != orderAcceptanceLine.CustomerReferanceNo)
                                                        {
                                                            <div style="background-color : #FF1818;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerReferanceNo</div>
                                                        }
                                                        else
                                                        {
                                                            <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerReferanceNo</div>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerReferanceNo</div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div style="background-color :  #D5CF14 ;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerReferanceNo</div>
                                                }


                                            }

                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.CustomerBarcodeNo) HeaderText="@L["LineGridCustomerBarcodeNo"]" TextAlign="TextAlign.Center" Width="240" Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);
                                                if (DataSource.SelectOrderAcceptanceRecordLines.Any(t => t.ProductCode == orderAcceptanceLine.ProductCode))
                                                {
                                                    if (orderAcceptanceLine.IsProductExists)
                                                    {

                                                        var customerBarcodeRefNo = ProductReferanceNumbersList.Where(t => t.ProductID == orderAcceptanceLine.ProductID).Select(t => t.CustomerBarcodeNo).FirstOrDefault();

                                                        if (customerBarcodeRefNo != orderAcceptanceLine.CustomerBarcodeNo)
                                                        {
                                                            <div style="background-color : #FF1818;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerBarcodeNo</div>
                                                        }
                                                        else
                                                        {
                                                            <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerBarcodeNo</div>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerBarcodeNo</div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div style="background-color : #D5CF14;width: 100%;height: 100%;">@orderAcceptanceLine.CustomerBarcodeNo</div>
                                                }

                                            }

                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.MinOrderAmount) Format="N2" Type="ColumnType.Number" HeaderText="@L["LineGridMinOrderAmount"]" TextAlign="TextAlign.Center" Width="220" Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);
                                                if (DataSource.SelectOrderAcceptanceRecordLines.Any(t => t.ProductCode == orderAcceptanceLine.ProductCode))
                                                {
                                                    <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.MinOrderAmount.ToString("N2")</div>
                                                }
                                                else
                                                {
                                                    <div style="background-color :  #D5CF14 ;width: 100%;height: 100%;">@orderAcceptanceLine.MinOrderAmount.ToString("N2")</div>
                                                }

                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.OrderAmount) Format="N2" Type="ColumnType.Number" HeaderText="@L["LineGridOrderAmount"]" TextAlign="TextAlign.Center" Width="200" Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);
                                                if (DataSource.SelectOrderAcceptanceRecordLines.Any(t => t.ProductCode == orderAcceptanceLine.ProductCode))
                                                {
                                                    if (orderAcceptanceLine.MinOrderAmount > orderAcceptanceLine.OrderAmount)
                                                    {
                                                        <div style="background-color : #FF1818;width: 100%;height: 100%;">@orderAcceptanceLine.OrderAmount.ToString("N2")</div>
                                                    }
                                                    else
                                                    {
                                                        <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.OrderAmount.ToString("N2")</div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div style="background-color : #D5CF14;width: 100%;height: 100%;">@orderAcceptanceLine.OrderAmount.ToString("N2")</div>
                                                }
                                            }

                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.UnitSetCode) HeaderText="@L["LineGridUnitSetCode"]" TextAlign="TextAlign.Center" Width="180" Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);
                                                if (DataSource.SelectOrderAcceptanceRecordLines.Any(t => t.ProductCode == orderAcceptanceLine.ProductCode))
                                                {
                                                    <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.UnitSetCode</div>
                                                }
                                                else
                                                {
                                                    <div style="background-color :  #D5CF14 ;width: 100%;height: 100%;">@orderAcceptanceLine.UnitSetCode</div>
                                                }

                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.DefinedUnitPrice) Format="N2" Type="ColumnType.Number" HeaderText="@L["LineGridDefinedUnitPrice"]" TextAlign="TextAlign.Center" Width="220" Visible=@LoginedUserService.SalesManagementShowAmountsChildMenu Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);
                                                if (DataSource.SelectOrderAcceptanceRecordLines.Any(t => t.ProductCode == orderAcceptanceLine.ProductCode))
                                                {
                                                    <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.DefinedUnitPrice.ToString("N2")</div>
                                                }
                                                else
                                                {
                                                    <div style="background-color :  #D5CF14 ;width: 100%;height: 100%;">@orderAcceptanceLine.DefinedUnitPrice.ToString("N2")</div>
                                                }

                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.OrderUnitPrice) Format="N2" Type="ColumnType.Number" HeaderText="@L["LineGridOrderUnitPrice"]" TextAlign="TextAlign.Center" Width="240" Visible=@LoginedUserService.SalesManagementShowAmountsChildMenu Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);

                                                if (DataSource.SelectOrderAcceptanceRecordLines.Any(t => t.ProductCode == orderAcceptanceLine.ProductCode))
                                                {

                                                    if (orderAcceptanceLine.DefinedUnitPrice > orderAcceptanceLine.OrderUnitPrice)
                                                    {
                                                        <div style="background-color : #FF1818;width: 100%;height: 100%;">@orderAcceptanceLine.OrderAmount.ToString("N2")</div>
                                                    }
                                                    else if (orderAcceptanceLine.DefinedUnitPrice == orderAcceptanceLine.OrderUnitPrice)
                                                    {
                                                        <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.OrderAmount.ToString("N2")</div>
                                                    }
                                                    else if (orderAcceptanceLine.DefinedUnitPrice < orderAcceptanceLine.OrderUnitPrice)
                                                    {
                                                        <div style="background-color : #26D514;width: 100%;height: 100%;">@orderAcceptanceLine.OrderAmount.ToString("N2")</div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div style="background-color : #D5CF14 ;width: 100%;height: 100%;">@orderAcceptanceLine.OrderAmount.ToString("N2")</div>
                                                }
                                            }

                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.LineAmount) Format="N2" Type="ColumnType.Number" HeaderText="@L["LineGridLineAmount"]" TextAlign="TextAlign.Center" Width="220" Visible=@LoginedUserService.SalesManagementShowAmountsChildMenu Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);
                                                if (DataSource.SelectOrderAcceptanceRecordLines.Any(t => t.ProductCode == orderAcceptanceLine.ProductCode))
                                                {
                                                    <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.LineAmount.ToString("N2")</div>
                                                }
                                                else
                                                {
                                                    <div style="background-color :  #D5CF14 ;width: 100%;height: 100%;">@orderAcceptanceLine.LineAmount.ToString("N2")</div>
                                                }

                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(VirtualLineModel.Description_) HeaderText="@L["LineGridDescription_"]" TextAlign="TextAlign.Center" Width="220" Context="OrderAcceptanceLineContext">
                                        <Template>
                                            @{
                                                VirtualLineModel orderAcceptanceLine = (OrderAcceptanceLineContext as VirtualLineModel);
                                                if (DataSource.SelectOrderAcceptanceRecordLines.Any(t => t.ProductCode == orderAcceptanceLine.ProductCode))
                                                {
                                                    <div style="background-color : white;width: 100%;height: 100%;">@orderAcceptanceLine.Description_</div>
                                                }
                                                else
                                                {
                                                    <div style="background-color :  #D5CF14 ;width: 100%;height: 100%;">@orderAcceptanceLine.Description_</div>
                                                }

                                            }
                                        </Template>
                                  </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </Template>
                    </DxGridLayoutItem>

                </Items>
            </DxGridLayout>
        </BodyTemplate>
        <FooterContentTemplate>
            <SfButton CssClass="TSICancelButton" OnClick="HideOrderAcceptanceControlPopup"><SfIcon Size="IconSize.Medium" Name="IconName.Undo"></SfIcon>&nbsp;@L["CloseButton"]</SfButton>
        </FooterContentTemplate>
    </DxPopup>

    <DxPopup @bind-Visible="OrderLineCrudPopup"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["OrderLineModalTitle"]"
             Width="62%"
             Height="56%"
             MinWidth="1060px"
             MinHeight="600px"
             HeaderCssClass="HeaderTitleCss">

        <BodyTemplate>
            <DxGridLayout CssClass="TSIGridLayoutHeight90">

                <Rows>
                    <DxGridLayoutRow Height="90%" />
                </Rows>

                <Columns>
                    <DxGridLayoutColumn Width="2%" />
                    <DxGridLayoutColumn Width="96%" />
                    <DxGridLayoutColumn Width="2%" />
                </Columns>

                <Items>
                    <br/>
                    <DxGridLayoutItem Row="0" Column="1">
                        <Template>
                            <SfGrid @ref=_OrderLineGrid ID="OrderLineGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@GridOrderLineList" AllowPaging="false" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="false" AllowExcelExport="false" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(OrderLineModel.ProductCode) HeaderText="@L["LineGridProductCode"]" TextAlign="TextAlign.Center" Width="180"> </GridColumn>
                                    <GridColumn Field=@nameof(OrderLineModel.OrderReferanceNo) HeaderText="@L["LineGridOrderReferanceNo"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(OrderLineModel.CustomerReferanceNo) HeaderText="@L["LineGridCustomerReferanceNo"]" TextAlign="TextAlign.Center" Width="240"> </GridColumn>
                                    <GridColumn Field=@nameof(OrderLineModel.CustomerBarcodeNo) HeaderText="@L["LineGridCustomerBarcodeNo"]" TextAlign="TextAlign.Center" Width="240">  </GridColumn>
                                    <GridColumn Field=@nameof(OrderLineModel.OrderAmount) Format="N2"Type="ColumnType.Number" HeaderText="@L["LineGridOrderAmount"]" TextAlign="TextAlign.Center" Width="200">  </GridColumn>
                                    <GridColumn Field=@nameof(OrderLineModel.UnitSetCode) HeaderText="@L["LineGridUnitSetCode"]" TextAlign="TextAlign.Center" Width="180"></GridColumn>
                                    <GridColumn Field=@nameof(OrderLineModel.Description_) HeaderText="@L["LineGridDescription_"]" TextAlign="TextAlign.Center" Width="220">  </GridColumn>
                                    <GridColumn Field=@nameof(OrderLineModel.IsRoute) DisplayAsCheckBox=true HeaderText="@L["LineGridIsRoute"]" TextAlign="TextAlign.Center" Width="220" >  </GridColumn>
                                    <GridColumn Field=@nameof(OrderLineModel.IsBoM) DisplayAsCheckBox=true HeaderText="@L["LineGridIsBoM"]" TextAlign="TextAlign.Center" Width="220" >  </GridColumn>
                                    <GridColumn Field=@nameof(OrderLineModel.IsApproved) DisplayAsCheckBox=true HeaderText="@L["LineGridIsApproved"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </Template>
                    </DxGridLayoutItem>

                </Items>
            </DxGridLayout>
        </BodyTemplate>
        <FooterContentTemplate>
            <SfButton CssClass="TSICancelButton" OnClick="HideOrderLinePopup"><SfIcon Size="IconSize.Medium" Name="IconName.Undo"></SfIcon>&nbsp;@L["CloseButton"]</SfButton>
        </FooterContentTemplate>
    </DxPopup>


    <DxPopup @bind-Visible="MRPLineCrudPopup"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["MRPLineModalTitle"]"
             Width="42%"
             Height="26%"
             MinWidth="720px"
             MinHeight="200px"
             HeaderCssClass="HeaderTitleCss">

        <BodyTemplate>
            <DxGridLayout CssClass="TSIGridLayout">

                <Rows>
                    <DxGridLayoutRow Height="95%" />
                </Rows>

                <Columns>
                    <DxGridLayoutColumn Width="6%" />
                    <DxGridLayoutColumn Width="42%" />
                    <DxGridLayoutColumn Width="6%" />
                    <DxGridLayoutColumn Width="42%" />
                    <DxGridLayoutColumn Width="6%" />

                </Columns>

                <Items>
                    <br />
                    <DxGridLayoutItem Row="0" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["MRPLineBranchCodeButtonEditLabel"] </strong></label>
                            <SfTextBox @ref="@LineBranchesButtonEdit" Created="@LineBranchesOnCreateIcon" @bind-Value="MRPLineDataSource.BranchCode" ShowClearButton=true ValueChange="LineBranchesOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="0" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["MRPLineWarehouseCodeButtonEditLabel"] </strong></label>
                            <SfTextBox @ref="@LineWarehousesButtonEdit" Created="@LineWarehousesOnCreateIcon" @bind-Value="MRPLineDataSource.WarehouseCode" ShowClearButton=true ValueChange="LineWarehousesOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>



                </Items>
            </DxGridLayout>
        </BodyTemplate>
        <FooterContentTemplate>
            <SfButton CssClass="TSISaveButton" OnClick="OnMRPLineSubmit"><SfIcon Size="IconSize.Medium" Name="IconName.Save"></SfIcon>&nbsp;@L["SaveButton"]</SfButton>
            <SfButton CssClass="TSICancelButton" OnClick="HideMRPLinesPopup"><SfIcon Size="IconSize.Medium" Name="IconName.Undo"></SfIcon>&nbsp;@L["CloseButton"]</SfButton>
        </FooterContentTemplate>
    </DxPopup>


}
@if (SelectPaymentPlansPopupVisible)
{
    <DxPopup @bind-Visible="SelectPaymentPlansPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["PaymentPlanModalTitle"]"
             Width="55%"
             Height="44%"
             MinWidth="1100px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="PaymentPlansGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@PaymentPlansList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>
                                        <GridEvents OnRecordDoubleClick="@PaymentPlansDoubleClickHandler" TValue="ListPaymentPlansDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListPaymentPlansDto.Code) HeaderText="@L["PaymentPlanModalGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListPaymentPlansDto.Name) HeaderText="@L["PaymentPlanModalGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListPaymentPlansDto.Days_) Type="ColumnType.Number" HeaderText="@L["PaymentPlanModalGridDays"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListPaymentPlansDto.DelayMaturityDifference) Format="N2" Type="ColumnType.Number" HeaderText="@L["PaymentPlanModalGridDelayMat"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectCurrentAccountCardsPopupVisible)
{
    <DxPopup @bind-Visible="SelectCurrentAccountCardsPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["CurrentAccountPopupTitle"]"
             Width="55%"
             Height="44%"
             MinWidth="1100px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="CurrentAccountCardsGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@CurrentAccountCardsList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@CurrentAccountCardsDoubleClickHandler" TValue="ListCurrentAccountCardsDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.Code) HeaderText="@L["CurrentAccountPopupGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.Name) HeaderText="@L["CurrentAccountPopupGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.Responsible) HeaderText="@L["CurrentAccountPopupGridResponsible"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.Email) HeaderText="@L["CurrentAccountPopupGridEmail"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SupplierSelectionPopup)
{
    <DxPopup @bind-Visible="SupplierSelectionPopup"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["SupplierModalTitle"]"
             Width="55%"
             Height="44%"
             MinWidth="1100px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="SupplierGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@SupplierSelectionList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowSelection="true" ShowColumnChooser="true" GridLines="GridLine.Both"
                                            AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@SupplierDoubleClickHandler" TValue="SupplierSelectionGrid"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(SupplierSelectionGrid.ProductCode) HeaderText="@L["SupplierPopupGridProductCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(SupplierSelectionGrid.UnitPrice) HeaderText="@L["SupplierPopupGridUnitPrice"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(SupplierSelectionGrid.CurrentAccountName) HeaderText="@L["SupplierPopupGridCurrentAccountName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(SupplierSelectionGrid.CurrenyCode) HeaderText="@L["SupplierPopupGridCurrenyCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(SupplierSelectionGrid.SupplyDate) HeaderText="@L["SupplierPopupGridSupplyDate"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>

                                        </GridColumns>
                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectWarehousesPopupVisible)
{
    <DxPopup @bind-Visible="SelectWarehousesPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["WarehouseModalTitle"]"
             Width="55%"
             Height="44%"
             MinWidth="1100px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="WarehouseGrid1" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@WarehousesList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowSelection="true" ShowColumnChooser="true" GridLines="GridLine.Both"
                                            AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@WarehousesDoubleClickHandler" TValue="ListWarehousesDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListWarehousesDto.Code) HeaderText="@L["WarehousesPopupGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListWarehousesDto.Name) HeaderText="@L["WarehousesPopupGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>

                                        </GridColumns>
                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectBranchesPopupVisible)
{
    <DxPopup @bind-Visible="SelectBranchesPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["BranchModalTitle"]"
             Width="55%"
             Height="44%"
             MinWidth="1100px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="BranchGrid1" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@BranchesList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowSelection="true" ShowColumnChooser="true" GridLines="GridLine.Both"
                                            AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@BranchesDoubleClickHandler" TValue="ListBranchesDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListBranchesDto.Code) HeaderText="@L["BranchesPopupGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListBranchesDto.Name) HeaderText="@L["BranchesPopupGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>

                                        </GridColumns>
                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectLineWarehousesPopupVisible)
{
    <DxPopup @bind-Visible="SelectLineWarehousesPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["WarehouseModalTitle"]"
             Width="55%"
             Height="44%"
             MinWidth="1100px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="WarehouseGrid2" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@LineWarehousesList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowSelection="true" ShowColumnChooser="true" GridLines="GridLine.Both"
                                            AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@LineWarehousesDoubleClickHandler" TValue="ListWarehousesDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListWarehousesDto.Code) HeaderText="@L["WarehousesPopupGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListWarehousesDto.Name) HeaderText="@L["WarehousesPopupGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>

                                        </GridColumns>
                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectLineBranchesPopupVisible)
{
    <DxPopup @bind-Visible="SelectLineBranchesPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["BranchModalTitle"]"
             Width="55%"
             Height="44%"
             MinWidth="1100px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="BranchGrid2" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@LineBranchesList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowSelection="true" ShowColumnChooser="true" GridLines="GridLine.Both"
                                            AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@LineBranchesDoubleClickHandler" TValue="ListBranchesDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListBranchesDto.Code) HeaderText="@L["BranchesPopupGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListBranchesDto.Name) HeaderText="@L["BranchesPopupGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>

                                        </GridColumns>
                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectProductsPopupVisible)
{
    <DxPopup @bind-Visible="SelectProductsPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["ProductModalTitle"]"
             Width="55%"
             Height="44%"
             MinWidth="1100px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="ProductsGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@ProductsList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@ProductsDoubleClickHandler" TValue="ListProductsDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListProductsDto.Code) HeaderText="@L["ProductModalGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListProductsDto.Name) HeaderText="@L["ProductModalGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}