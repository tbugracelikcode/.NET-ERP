@page "/company-checks"
@layout MainLayout


@inherits BaseListPage<SelectCompanyChecksDto, ListCompanyChecksDto, CreateCompanyChecksDto, UpdateCompanyChecksDto, ListCompanyChecksParameterDto>

@inject ICompanyChecksAppService CompanyChecksAppService
@inject IGetSQLDateAppService GetSQLDateAppService
@inject ICurrentAccountCardsAppService CurrentAccountCardsAppService
@inject IBankAccountsAppService BankAccountsAppService
@inject IUserPermissionsAppService UserPermissionsAppService
@inject IMenusAppService MenusAppService
@inject IStringLocalizer<CompanyChecksResource> L

@if (!base.IsLoaded)
{
    <CircleLoading Caption="@base.LoadingCaption" Text="@base.LoadingText" />
}
else
{
    <DevGridLayout ColumnCount="1" RowCount="3" RowHeights="@RowHeights("*")">
        <GridLayoutItems>
            <DxGridLayoutItem Row="0" Column="0" ColumnSpan="1">
                <Template>
                    <SfCard class="TSIListPageTitleCard">
                        <CardContent>
                            <TsiBreadCrumb PreviousMenus="@L["UIPreviousMenu"]" CurrentMenu="@L["UICurrentMenu"]" />
                        </CardContent>
                        <CardFooter>
                        </CardFooter>
                    </SfCard>
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Row="2" Column="0" ColumnSpan="1">
                <Template>
                    <SfCard class="TSIGridCards">
                        <CardContent>
                            <SfGrid ID="Grid" @ref="_grid" AllowPdfExport=true ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@ListDataSource" AllowPaging="false" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra" ContextMenuItems="@GridContextMenu" Toolbar=@GridToolbarItems>
                                <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                <GridEvents ContextMenuItemClicked="@OnContextMenuClick" OnToolbarClick="@ToolbarClickHandler" TValue="ListCompanyChecksDto"></GridEvents>
                                <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridPageSettings PageSizes="true"></GridPageSettings>
                                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(ListCompanyChecksDto.SerialNo) HeaderText="@L["SerialNo"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(ListCompanyChecksDto.CurrentAccountCardName) HeaderText="@L["CurrentAccountCardName"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>
                                    <GridColumn Field=@nameof(ListCompanyChecksDto.BankAccountName) HeaderText="@L["BankAccountName"]" TextAlign="TextAlign.Center" Width="220"></GridColumn>

                                    <GridColumn Field=@nameof(ListCompanyChecksDto.CompanyChecksState) HeaderText="@L["CompanyChecksState"]" TextAlign="TextAlign.Center" Width="220">
                                        <Template>
                                            @{
                                                CompanyChecksStateEnum stateEnum = (context as ListCompanyChecksDto).CompanyChecksState;
                                                string stateSTR = string.Empty;

                                                switch (stateEnum)
                                                {
                                                    case CompanyChecksStateEnum.KendiCekimiz: stateSTR = L["EnumOurOwn"]; break;
                                                    case CompanyChecksStateEnum.MusteriCeki: stateSTR = L["EnumCustomer"]; break;
                                                }
                                            }
                                            @stateSTR
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(ListCompanyChecksDto.CompanyChecksPaymentState) HeaderText="@L["CompanyChecksPaymentState"]" TextAlign="TextAlign.Center" Width="220">
                                        <Template>
                                            @{
                                                CompanyChecksPaymentStateEnum paymenystateEnum = (context as ListCompanyChecksDto).CompanyChecksPaymentState;
                                                string paymentstateSTR = string.Empty;

                                                switch (paymenystateEnum)
                                                {
                                                    case CompanyChecksPaymentStateEnum.Odendi: paymentstateSTR = L["EnumPaid"]; break;
                                                    case CompanyChecksPaymentStateEnum.Odenmedi: paymentstateSTR = L["EnumNotPaid"]; break;
                                                }
                                            }
                                            @paymentstateSTR
                                        </Template>
                                    </GridColumn>
                                </GridColumns>

                            </SfGrid>
                        </CardContent>
                        <CardFooter>
                        </CardFooter>
                    </SfCard>
                </Template>
            </DxGridLayoutItem>
        </GridLayoutItems>
    </DevGridLayout>

    <DxPopup @bind-Visible="base.EditPageVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["EditModalTitle"]"
             Width="62%"
             Height="32%"
             MinWidth="1060px"
             MinHeight="350px"
             HeaderCssClass="HeaderTitleCss"
             Showing="CrudModalShowing"
             Closing="CrudModalClosing">

        <BodyTemplate>
            <DxGridLayout CssClass="TSIGridLayout">

                <Rows>
                    <DxGridLayoutRow Height="25%" />
                    <DxGridLayoutRow Height="25%" />
                    <DxGridLayoutRow Height="25%" />
                </Rows>

                <Columns>
                    <DxGridLayoutColumn Width="4%" />
                    <DxGridLayoutColumn Width="28%" />
                    <DxGridLayoutColumn Width="4%" />
                    <DxGridLayoutColumn Width="28%" />
                    <DxGridLayoutColumn Width="4%" />
                    <DxGridLayoutColumn Width="28%" />
                    <DxGridLayoutColumn Width="4%" />
                </Columns>

                <Items>
                    <br />
                    <DxGridLayoutItem Row="0" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["SerialNoLabel"] </strong></label>
                            <SfTextBox @bind-Value="DataSource.SerialNo"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="0" Column="3">
                        <Template>
                            <center>
                                <label class="TSIModalLabel"><strong>@L["DueDateLabel"] </strong></label><br />
                                <SfDatePicker @bind-Value="DataSource.DueDate"></SfDatePicker>
                            </center>
                        </Template>
                    </DxGridLayoutItem>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CurrentAccountCardCodeLabel"] </strong></label>
                            <SfTextBox Readonly="true" @ref="@CurrentAccountCardsCodeButtonEdit" Created="@CurrentAccountCardsCodeOnCreateIcon" @bind-Value="DataSource.CurrentAccountCardCode" ShowClearButton=true ValueChange="CurrentAccountCardsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CurrentAccountCardNameLabel"] </strong></label>
                            <SfTextBox Readonly="true" @ref="@CurrentAccountCardsNameButtonEdit" Created="@CurrentAccountCardsNameOnCreateIcon" @bind-Value="DataSource.CurrentAccountCardName" ShowClearButton=true ValueChange="CurrentAccountCardsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="1" Column="5">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["BankAccountNameLabel"] </strong></label>
                            <SfTextBox Readonly="true" @ref="@BankAccountsButtonEdit" Created="@BankAccountOnCreateIcon" @bind-Value="DataSource.BankAccountName" ShowClearButton=true ValueChange="BankAccountsOnValueChange"></SfTextBox>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="1">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CompanyChecksStateLabel"] </strong></label>
                            <SfDropDownList TItem="SelectCompanyChecksDto" TValue="CompanyChecksStateEnum" PopupHeight="230px" @bind-Value="@DataSource.CompanyChecksState" DataSource="@states">
                                <DropDownListFieldSettings Text="CompanyChecksStateName" Value="CompanyChecksState"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </Template>
                    </DxGridLayoutItem>

                    <DxGridLayoutItem Row="2" Column="3">
                        <Template>
                            <label class="TSIModalLabel"><strong>@L["CompanyChecksPaymentStateLabel"] </strong></label>
                            <SfDropDownList TItem="SelectCompanyChecksDto" TValue="CompanyChecksPaymentStateEnum" PopupHeight="230px" @bind-Value="@DataSource.CompanyChecksPaymentState" DataSource="@paymentstates">
                                <DropDownListFieldSettings Text="CompanyChecksPaymentStateName" Value="CompanyChecksPaymentState"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </Template>
                    </DxGridLayoutItem>



                </Items>
            </DxGridLayout>
        </BodyTemplate>
        <FooterContentTemplate>
            <SfButton CssClass="TSISaveButton" OnClick="OnSubmit"><SfIcon Size="IconSize.Medium" Name="IconName.Save"></SfIcon>&nbsp;@L["SaveButton"]</SfButton>
            <SfButton CssClass="TSICancelButton" OnClick="HideEditPage"><SfIcon Size="IconSize.Medium" Name="IconName.Undo"></SfIcon>&nbsp;@L["CloseButton"]</SfButton>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectCurrentAccountCardsPopupVisible)
{
    <DxPopup @bind-Visible="SelectCurrentAccountCardsPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["CurrentAccountModalTitle"]"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="CurrentAccountCardsGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@CurrentAccountCardsList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@CurrentAccountCardsDoubleClickHandler" TValue="ListCurrentAccountCardsDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.Code) HeaderText="@L["CurrentAccountCardCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.Name) HeaderText="@L["CurrentAccountCardNames"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListCurrentAccountCardsDto.CustomerCode) HeaderText="@L["CurrentAccountCardCustomerCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                        </GridColumns>

                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}

@if (SelectBankAccountsPopupVisible)
{
    <DxPopup @bind-Visible="SelectBankAccountsPopupVisible"
             ShowFooter="true"
             CloseOnEscape="false"
             CloseOnOutsideClick="false"
             HeaderText="@L["BankAccountModalTitle"]"
             Width="64%"
             Height="44%"
             MinWidth="1220px"
             MinHeight="470px"
             HeaderCssClass="HeaderTitleCss">
        <BodyTemplate>

            <DevGridLayout ColumnCount="1" RowCount="1">
                <GridLayoutItems>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <SfCard class="TSIGridCards2">

                                <CardContent>
                                    <SfGrid ID="BankAccountsGrid" ColumnMenuItems=@MenuItems ShowColumnMenu="true" DataSource="@BankAccountsList" AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true"
                                            AllowExcelExport="true" ShowColumnChooser="true" GridLines="GridLine.Both" AllowSelection="true" AllowSorting="true" Height="100%" Width="100%" class="GridZebra">
                                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>

                                        <GridEvents OnRecordDoubleClick="@BankAccountsDoubleClickHandler" TValue="ListBankAccountsDto"></GridEvents>
                                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal"></GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                        <GridPageSettings PageSizes="true"></GridPageSettings>
                                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ListBankAccountsDto.Code) HeaderText="@L["BankAccountGridCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListBankAccountsDto.Name) HeaderText="@L["BankAccountGridName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(ListBankAccountsDto.BankBranchName) HeaderText="@L["BankAccountGridBankBranchName"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                        </GridColumns>
                                        <GridColumn Field=@nameof(ListBankAccountsDto.SWIFTCode) HeaderText="@L["BankAccountGridSWIFTCode"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                                    </SfGrid>
                                </CardContent>
                                <CardFooter>
                                </CardFooter>
                            </SfCard>
                        </Template>
                    </DxGridLayoutItem>
                </GridLayoutItems>
            </DevGridLayout>

        </BodyTemplate>
        <FooterContentTemplate>
        </FooterContentTemplate>
    </DxPopup>
}