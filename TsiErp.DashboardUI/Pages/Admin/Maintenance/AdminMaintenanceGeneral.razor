@page "/admin/maintenance-general"
@layout AdminLayout

@inject NavigationManager NavigationManager
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
<div class="row">
    <div class="control-section col-lg-9 card-control-section tile_layout">
        <div class="row e-card-layout">
            @if (this.CardDatas.Count == 0)
            {
                <div class="e-error">
                    <div class="e-error-content">Sonuç bulunamadı</div>
                </div>
            }
            else
            {
                @foreach (StationCards card in CardDatas)
                {
                    <div class="col-lg-2 col-md-2 col-sm-4" style="padding: 10px;">
                        <div id="card_sample_1" class="card_sample">
                            <SfCard style="height :500px">
                                <center><CardImage Image="@card.ImageUrl" /></center>
                                <CardHeader Title="@card.StationCode" />
                                <CardContent>
                                    <ChildContent>
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    @*<th scope="col" style="text-align:center">Bakım </th>
                                            <th scope="col" style="text-align:left"> &nbsp;Detayları</th>*@
                                                    <th scope="col" style="text-align:left"> </th>
                                                    <th scope="col" style="text-align:left"></th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td><strong>Bakıma Kalan Süre :</strong></td>
                                                    <td>@card.TimeLeft Saat</td>
                                                </tr>
                                                <tr>
                                                    <td><strong>Planlanan Bakım Tarihi :</strong></td>
                                                    <td>@card.PlannedMaintenanceDate.ToString("dd-MM-yyyy")</td>
                                                </tr>
                                                <tr>
                                                    <td><strong>Bakım Periyodu :</strong></td>
                                                    <td>@card.Period</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </ChildContent>
                                </CardContent>
                                <CardFooter>
                                    <CardFooterContent>
                                        <SfButton CssClass="e-btn e-outline e-primary" OnClick="@(() => OnClickMaintenance(card.StationCode, card.PlannedMaintenanceDate))">Bakım Detaylarını Göster</SfButton>
                                    </CardFooterContent>
                                </CardFooter>
                            </SfCard>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    @* <div class="col-lg-3 property-section">
    <div class="property-panel-section">
    <div class="property-panel-header">Properties</div>
    <div class="property-panel-content">
    <table class="table">
    <tr>
    <td>
    <SfTextBox Placeholder="Search book" ShowClearButton="true" Width="200px" ValueChange="OnSearch" @bind-Value="SearchValue"></SfTextBox>
    </td>
    </tr>
    <tr>
    <td>
    <SfDropDownList TValue="string" TItem="string" DataSource="@SortingType" Placeholder="Sorting order" Width="200px" @bind-Value="SortingValue">
    <DropDownListEvents TValue="string" TItem="string" ValueChange="OnSorting"></DropDownListEvents>
    </SfDropDownList>
    </td>
    </tr>
    <tr>
    <td>
    <SfMultiSelect Mode="VisualMode.Default" AllowFiltering="true" DataSource="@FilteringType" Placeholder="Book category" ShowClearButton="true" Width="200px" @bind-Value="FilteringValue">
    <MultiSelectEvents TValue="string[]" TItem="string" ValueChange="OnFiltering"></MultiSelectEvents>
    </SfMultiSelect>
    </td>
    </tr>
    <tr>
    <td>
    <SfButton Content="Reset" OnClick="OnReset"></SfButton>
    </td>
    </tr>
    </table>
    </div>
    </div>
    </div>*@
</div>

<DxPopup Visible="@PopupVisible"
         ShowFooter="true"
         HeaderText="@TitleStation"
         Width="800px"
         Height="800px"
         HeaderCssClass="HeaderTitleCss">
    <BodyTemplate>
        <SfCard class="Cards">
            <CardHeader>
            </CardHeader>
            <CardContent>
                <SfTab CssClass="default-tab" OverflowMode="@OverflowMode.Scrollable" HeaderPlacement="HeaderPosition.Top" Width="100%">
                    <TabAnimationSettings>
                        <TabAnimationPrevious Effect="AnimationEffect.FadeIn"></TabAnimationPrevious>
                        <TabAnimationNext Effect="AnimationEffect.FadeOut"></TabAnimationNext>
                    </TabAnimationSettings>
                    <TabItems>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="İhtiyaç Listesi"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <SfCard class="Cards" style="text-align:center">
                                    <CardContent>
                                    </CardContent>
                                    <CardFooter>
                                    </CardFooter>
                                </SfCard>
                                <SfCard class="Cards">

                                    <CardFooter>
                                    </CardFooter>
                                </SfCard>
                            </ContentTemplate>
                        </TabItem>

                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Talimatlar"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                               
                                <SfCard class="Cards" style="text-align:center">
                                    <CardContent>

                                    </CardContent>
                                    <CardFooter>
                                    </CardFooter>
                                </SfCard>
                                <SfCard class="Cards">

                                    <CardContent>
                                    </CardContent>
                                    <CardFooter>
                                    </CardFooter>
                                </SfCard>
                            </ContentTemplate>
                        </TabItem>

                    </TabItems>
                </SfTab>
            </CardContent>
            <CardFooter>
            </CardFooter>
        </SfCard>
    </BodyTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button" RenderStyle="ButtonRenderStyle.Primary" Text="OK" Click="@(() => PopupVisible = false)" />
        <DxButton CssClass="popup-button" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => PopupVisible = false)" />
    </FooterContentTemplate>
</DxPopup>
<style>
    .GridZebra table tbody tr:nth-child(odd) {
        background-color: #B5B5B5;
    }

    .GridZebra table tbody tr:nth-child(n) {
        text-align: center;
    }

    table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    td, th {
        border: 0px solid #dddddd;
        text-align: center;
        padding: 8px;
    }

    .ulstyle {
        margin: 0px;
        padding-left: 20px;
        display: inline-block;
    }

    .list {
        float: left;
        line-height: 20px;
        font: 10px;
        min-width: 280px;
    }

    .FilterCard {
        background-color: #f7f7f7;
        border: 1px solid #d6d5d5;
    }

    .Cards {
        border: 1px solid #d6d5d5;
    }

    .e-checkbox-wrapper.e-customcheck:hover .e-frame.e-check {
        background-color: #9C0D0D;
        font: 600;
        font-size: 16px;
        font-weight: bold;
    }

    .FilterLabelTitle {
        color: #830000;
        font-size: 18px;
    }

    .FilterLabelTitleValue {
        font-size: 18px;
    }

    .HeaderTitleCss {
        font-weight: bold;
        font-size: 24px;
        text-align: center;
    }

    .property-panel-section .property-panel-content td {
        padding: 0 0 15px 0;
    }

    .tile_layout.card-control-section .e-error {
        height: 100px;
        width: 100%;
    }

        .tile_layout.card-control-section .e-error .e-error-content {
            color: red;
            line-height: 100px;
            text-align: center;
        }

    .tile_layout.card-control-section .e-card .e-card-image {
        background-size: cover;
        height: 150px;
        position: inherit;
        width: 150px;
    }

    .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-header-title {
        font-size: 20px;
        font-family: Helvetica, 'Segoe UI';
        font-weight: bold;
    }

    .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-sub-title {
        padding-top: 5px;
    }

    .tile_layout.card-control-section .e-card .e-card-content {
        padding-top: 0px;
        height: 175px;
    }

    #source_link {
        float: right;
        margin-right: 10px;
    }
</style>
@code {

    [Inject] public IJSRuntime JsRuntime { get; set; }
    public string SearchValue { get; set; }
    public string SortingValue { get; set; }
    public string[] FilteringValue { get; set; }
    string TitleStation = string.Empty;

    bool PopupVisible { get; set; } = false;


    private List<StationCards> _cardDatas;


    public List<StationCards> CardDatas
    {
        get { return _cardDatas; }
        set { _cardDatas = value; }
    }

    protected override void OnInitialized()
    {
        _cardDatas = this.GetCardDatas();
        base.OnInitialized();

        var list = DBHelper.GetMaintenanceRecords();
    }

    public void OnClickMaintenance(string stationCode, DateTime maintenanceDate)
    {
        PopupVisible = true;
        TitleStation = stationCode + " - " + maintenanceDate.ToString("dd.MM.yyyy") + " Tarihli Planlanan Bakım Detayları";

    }



    public class StationCards
    {
        public string ImageUrl { get; set; }

        public string StationCode { get; set; }

        public int TimeLeft { get; set; }

        public DateTime PlannedMaintenanceDate { get; set; }

        public string Period { get; set; }

        public string StationDepartment { get; set; }
    }



    public List<StationCards> GetCardDatas()
    {
        var assetpath = "images/Maintenance/press.gif";
        List<StationCards> CardData = new List<StationCards>();

        var stations = DBHelper.GetStations().Where(t=>t.VERITOPLAMA == true).ToList();

        if (stations != null)
        {
            foreach (var item in stations)
            {
                StationCards stationCards = new StationCards
                    {
                        ImageUrl = assetpath,
                        StationCode = item.MAKINEKODU,
                        StationDepartment = "",
                        Period = "",
                        PlannedMaintenanceDate = DateTime.Today,
                        TimeLeft = 75
                    };
                CardData.Add(stationCards);
            }
        }




        return CardData;
    }

    public List<string> SortingType = new List<string>() { "Ascending", "Descending" };
    public List<string> FilteringType = new List<string>() { "1.Kat", "Zemin Kat", "-1. Kat" };
    public async Task NavigateToUrlAsync(string url)
    {
        await JsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

}