@page "/vsm"
@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Diagram.SymbolPalette
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Inputs

<div style="width:240px;height:100%;float:left;">
    <div class="sb-mobile-palette-bar">
        <div id="palette-icon" style="float: right;" role="button" class="e-ddb-icons1 e-toggle-palette"></div>
    </div>
    <div id="palette-space" class="sb-mobile-palette">
        <SfSymbolPaletteComponent @ref="@PaletteInstance" Height="700px" Palettes="@palettes" SymbolHeight="60" SymbolWidth="60" SymbolMargin="@SymbolMargin">
        </SfSymbolPaletteComponent>
    </div>
</div>
<div id="diagram-space" class="sb-mobile-diagram">
    <div class="content-wrapper" style="border: 1px solid #D7D7D7">
        <div style="width:calc(100% - 242px);height:100%;float:left;">
            <SfDiagramComponent @ref="@Diagram" Connectors="@connectors" Created="OnCreated" SelectionChanged="@OnSelectionChanged" Height="687px"  Nodes="@nodes" DragDrop="OnDrop" NodeCreating="OnNodeCreating" ConnectorCreating="OnConnectorCreating"  SelectionSettings="@selectionSettings"GetCustomTool="@GetCustomTool">
                <SnapSettings>
                    <HorizontalGridLines LineColor="#e0e0e0 " LineIntervals="@GridLineIntervals">
                    </HorizontalGridLines>
                    <VerticalGridLines LineColor="#e0e0e0" LineIntervals="@GridLineIntervals">
                    </VerticalGridLines>
                </SnapSettings>
                <DiagramTemplates>
                    <NodeTemplate>
                        @{
                                var node = (context as Node);
                                string id = node.ID;
                                switch (node.Annotations.ElementAt(0).Content)
                                {
                                    case "1":
                                        <style>
                                            th {
                                                border: 5px solid #c1dad7
                                            }

                                            td {
                                                border: 5px solid #c1dad7
                                            }

                                            .c1 {
                                                background: #4b8c74
                                            }

                                            .c2 {
                                                background: #74c476
                                            }

                                            .c3 {
                                                background: #a4e56d
                                            }

                                            .c4 {
                                                background: #cffc83
                                            }
                                        </style>

                                        <table style="width:100%;">
                                            <tbody>
                                                <tr> <th class="c1">ID</th> <th class="c2">offsetX</th> <th class="c3">offsetY</th></tr>
                                                <tr>
                                                    <td class="c1">@id</td>
                                                    <td class="c2"><SfTextBox Enabled=true Readonly=false></SfTextBox></td>
                                                    <td class="c3"><input type="text" placeholder="Veriii"/></td>
                                                </tr>

                                            </tbody>
                                        </table>
                                        break;
                                    case "2":

                                        break;
                                    case "3":

                                        break;
                                    default:

                                        break;
                                }
                            }
                        </NodeTemplate>
                    </DiagramTemplates>
                </SfDiagramComponent>
            </div>
        </div>
    </div>
    @code {
    private int connectorCount = 0;
    DiagramSelectionSettings selectionSettings = new DiagramSelectionSettings();
    public DiagramSize SymbolPreview;
    public SymbolMargin SymbolMargin = new SymbolMargin { Left = 15, Right = 15, Top = 15, Bottom = 15 };
    public SfDiagramComponent Diagram;
    public SfSymbolPaletteComponent PaletteInstance;
    DiagramObjectCollection<UserHandle> handles = new DiagramObjectCollection<UserHandle>();
    //Defines Diagram's nodes collection
    private DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
    //Defines Diagram's connectors collection
    private DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
    //Define palettes collection
    private DiagramObjectCollection<Palette> palettes = new DiagramObjectCollection<Palette>();
    // Defines palette's flow-shape collection
    private DiagramObjectCollection<NodeBase> ShapeSymbols = new DiagramObjectCollection<NodeBase>();
    // Defines interval values for GridLines
    public double[] GridLineIntervals { get; set; }
    // Defines palette's connector collection
    private DiagramObjectCollection<NodeBase> connectorSymbols = new DiagramObjectCollection<NodeBase>();

    public void OnDrop(DropEventArgs args)
    {
        args.Cancel = true;
        var NewNode = args.Element as Node;
        var annot = NewNode.Annotations.ElementAt(0).Content;

        switch (annot)
        {
            case "1":
                nodes.Add(new Node()
                    {
                        OffsetX = NewNode.OffsetX,
                        OffsetY = NewNode.OffsetY,
                        Width = 200,
                        Height = 200,
                        Annotations = NewNode.Annotations,
                        Shape = new Shape()
                        {
                            Type = NodeShapes.HTML,
                        }
                    });
                break;
            case "2":
                nodes.Add(new Node()
                    {
                        OffsetX = NewNode.OffsetX,
                        OffsetY = NewNode.OffsetY,
                        Width = 200,
                        Height = 200,
                        Annotations = NewNode.Annotations,
                        Shape = new Shape()
                        {
                            Type = NodeShapes.HTML,
                        }

                    });
                break;
            case "3":
                nodes.Add(new Node()
                    {
                        OffsetX = NewNode.OffsetX,
                        OffsetY = NewNode.OffsetY,
                        Width = 200,
                        Height = 200,
                        Annotations = NewNode.Annotations,
                        Shape = new Shape()
                        {
                            Type = NodeShapes.HTML,
                        }

                    });
                break;
            case "4":
                nodes.Add(new Node()
                    {
                        OffsetX = NewNode.OffsetX,
                        OffsetY = NewNode.OffsetY,
                        Width = 200,
                        Height = 200,
                        Annotations = NewNode.Annotations,
                        Shape = new Shape()
                        {
                            Type = NodeShapes.HTML,
                        }

                    });
                break;
            case "5":
                nodes.Add(new Node()
                    {
                        OffsetX = NewNode.OffsetX,
                        OffsetY = NewNode.OffsetY,
                        Width = 200,
                        Height = 200,
                        Annotations = NewNode.Annotations,
                        Shape = new Shape()
                        {
                            Type = NodeShapes.HTML,
                        }

                    });
                break;
            case "6":
                nodes.Add(new Node()
                    {
                        OffsetX = NewNode.OffsetX,
                        OffsetY = NewNode.OffsetY,
                        Width = 200,
                        Height = 200,
                        Annotations = NewNode.Annotations,
                        Shape = new Shape()
                        {
                            Type = NodeShapes.HTML,
                        }

                    });
                break;
            case "7":
                nodes.Add(new Node()
                    {
                        OffsetX = NewNode.OffsetX,
                        OffsetY = NewNode.OffsetY,
                        Width = 200,
                        Height = 200,
                        Annotations = NewNode.Annotations,
                        Shape = new Shape()
                        {
                            Type = NodeShapes.HTML,
                        }

                    });
                break;
            default:
                break;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            UpdateHandle();
        }
        PaletteInstance.Targets = new DiagramObjectCollection<SfDiagramComponent>
        {
            Diagram
        };
    }

    private void OnSelectionChanged(SelectionChangedEventArgs args)
    {
        if (args.NewValue.Count > 0 && args.NewValue[0] is Node)
        {
            Diagram.SelectionSettings.Constraints = Diagram.SelectionSettings.Constraints | SelectorConstraints.UserHandle;
        }
        else if (args.NewValue.Count > 0)
        {
            Diagram.SelectionSettings.Constraints = Diagram.SelectionSettings.Constraints & ~SelectorConstraints.UserHandle;
        }
    }

    private void OnCreated()
    {
        if (Diagram.Nodes.Count > 0)
            Diagram.Select(new ObservableCollection<IDiagramObject>() { Diagram.Nodes[0] });
    }
    // Method to customize the tool
    public InteractionControllerBase GetCustomTool(DiagramElementAction action, string id)
    {
        InteractionControllerBase tool = null;
        if (id == "Draw")
        {
            tool = new DrawTool(Diagram);
        }
        else
        {
            tool = new AddDeleteTool(Diagram);
        }
        return tool;
    }
    // Custom tool to delete the node.
    public class AddDeleteTool : DragController
    {
        SfDiagramComponent sfDiagram;
        Node deleteObject = null;
        public AddDeleteTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            sfDiagram = Diagram;
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            if (sfDiagram.SelectionSettings.Nodes.Count > 0 && ((sfDiagram.SelectionSettings.Nodes[0]) is Node))
            {
                deleteObject = (sfDiagram.SelectionSettings.Nodes[0]) as Node;
            }
        }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {
            if (deleteObject != null)
            {
                sfDiagram.BeginUpdate();
                sfDiagram.Nodes.Remove(deleteObject);
                _ = sfDiagram.EndUpdate();
            }
            base.OnMouseUp(args);
            this.InAction = true;
        }
    }
    public class DrawTool : ConnectorDrawingController
    {
        SfDiagramComponent sfDiagram;
        Connector newConnector = null;
        public DrawTool(SfDiagramComponent Diagram) : base(Diagram, DiagramElementAction.ConnectorSourceEnd)
        {
            sfDiagram = Diagram;
            newConnector = new Connector()
                {
                    ID = "OrthogonalConnector",
                    SourceID = sfDiagram.SelectionSettings.Nodes[0].ID,
                    Type = ConnectorSegmentType.Orthogonal,
                };
#pragma warning disable BL0005
            Diagram.InteractionController = DiagramInteractions.DrawOnce;
            Diagram.DrawingObject = newConnector;
#pragma warning restore BL0005
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            base.OnMouseDown(args);
        }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {
            base.OnMouseUp(args);
        }
    }
    protected override void OnInitialized()
    {
        GridLineIntervals = new double[] { 1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75 };
        InitPaletteModel();
    }

    // Create Nodes and Connectors for the Palette.
    private void InitPaletteModel()    
    {
        palettes = new DiagramObjectCollection<Palette>();
        SymbolPreview = new DiagramSize
            {
                Width = 100,
                Height = 100
            };
        ShapeSymbols = new DiagramObjectCollection<NodeBase>();
        CreatePaletteNode("images/VSM_Image.png", "1", "1");
        CreatePaletteNode("images/VSM_Image2.png", "2", "2");
        CreatePaletteNode("images/VSM_Image3.png", "3", "3");
        CreatePaletteNode("images/VSM_Image4.png", "4", "4");
        CreatePaletteNode("images/VSM_Image5.png", "5", "5");
        CreatePaletteNode("images/VSM_Image6.png", "6", "6");
        CreatePaletteNode("images/VSM_Image7.png", "7", "7");
        CreatePaletteNode("images/VSM_Image8.png", "8", "8");
        CreatePaletteNode("images/VSM_Image9.png", "9", "9");
        CreatePaletteNode("images/VSM_Image10.png", "10", "10");
        CreatePaletteNode("images/VSM_Image11.png", "11", "11");
        CreatePaletteNode("images/VSM_Image12.png", "12", "12");
        CreatePaletteNode("images/VSM_Image13.png", "13", "13");
        CreatePaletteNode("images/VSM_Image14.png", "14", "14");
        CreatePaletteNode("images/VSM_Image15.png", "15", "15");
        CreatePaletteNode("images/VSM_Image16.png", "16", "16");
        CreatePaletteNode("images/VSM_Image17.png", "17", "17");
        connectorSymbols = new DiagramObjectCollection<NodeBase>();
        CreatePaletteConnector("Link1", ConnectorSegmentType.Orthogonal, DecoratorShape.Arrow);
        CreatePaletteConnector("Link2", ConnectorSegmentType.Orthogonal, DecoratorShape.None);
        CreatePaletteConnector("Link3", ConnectorSegmentType.Straight, DecoratorShape.Arrow);
        CreatePaletteConnector("Link4", ConnectorSegmentType.Straight, DecoratorShape.None);
        CreatePaletteConnector("Link5", ConnectorSegmentType.Bezier, DecoratorShape.None);
        palettes = new DiagramObjectCollection<Palette>()
        {
            #pragma warning disable BL0005
            new Palette() {Symbols = ShapeSymbols, Title = "VSM Shapes", ID = "VSM Shapes", IconCss = "e-ddb-icons e-flow"},
            new Palette() {Symbols = connectorSymbols, Title = "Connectors", IsExpanded = true, IconCss = "e-ddb-icons e-connector"},
            #pragma warning restore BL0005
        };
    }

    private void OnNodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        node.Style.Fill = "#357BD2";
        if (!(node.ID.StartsWith("Annotation") || node.ID.StartsWith("Sequential Data")))
            node.Style.StrokeColor = "White";
        node.Style.Opacity = 1;
    }

    private void OnConnectorCreating(IDiagramObject obj)
    {
        Connector node = obj as Connector;
        node.Style.Fill = "black";
        node.Style.StrokeColor = "black";
        node.Style.Opacity = 1;
        node.TargetDecorator.Style.Fill = "black";
        node.TargetDecorator.Style.StrokeColor = "black";
    }

    // Method is used to create a node for the palette.
    private void CreatePaletteNode(string imgSrc, string id, string tip)
    {
        ShapeAnnotation shapeAnnotation = new ShapeAnnotation() { Content = tip };
        Node diagramNode = new Node()
            {
                ID = id,
                Shape = new ImageShape() { Type = NodeShapes.Image, Source = imgSrc },
                Style = new ShapeStyle() { StrokeColor = "#757575", StrokeWidth = 1 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() { shapeAnnotation }
            };

        double oldWidth = Convert.ToDouble(diagramNode.Width);
        double oldHeight = Convert.ToDouble(diagramNode.Height);
        double ratio = 100 / oldWidth;
        diagramNode.Width = 100;
        diagramNode.Height *= ratio;
        ShapeSymbols.Add(diagramNode);
    }

    // used to create a Port.
    private DiagramObjectCollection<PointPort> CreatePort()
    {
        DiagramObjectCollection<PointPort> defaultsPorts = new DiagramObjectCollection<PointPort>();
        PointPort port1 = new PointPort()
            {
                ID = "port1",
                Shape = PortShapes.Circle,
                Offset = new DiagramPoint() { X = 0, Y = 0.5 }
            };
        PointPort port2 = new PointPort()
            {
                ID = "port2",
                Shape = PortShapes.Circle,
                Offset = new DiagramPoint() { X = 0.5, Y = 0 }
            };
        PointPort port3 = new PointPort()
            {
                ID = "port3",
                Shape = PortShapes.Circle,
                Offset = new DiagramPoint() { X = 1, Y = 0.5 }
            };
        PointPort port4 = new PointPort()
            {
                ID = "port4",
                Shape = PortShapes.Circle,
                Offset = new DiagramPoint() { X = 0.5, Y = 1 }
            };
        defaultsPorts.Add(port1);
        defaultsPorts.Add(port2);
        defaultsPorts.Add(port3);
        defaultsPorts.Add(port4);
        return defaultsPorts;
    }

    // Method is used to create a Connector for the diagram.
    private void CreateConnector(string sourceId, string targetId, string label = default(string), bool isDashLine = false, string sport = "", string tport = "")
    {
        Connector diagramConnector = new Connector()
            {
                ID = string.Format("connector{0}", ++connectorCount),
                SourceID = sourceId,
                TargetID = targetId,
                SourcePortID = sport,
                TargetPortID = tport
            };
        if (isDashLine)
        {
            diagramConnector.Style = new ShapeStyle() { StrokeDashArray = "2,2" };
        }
        if (label != default(string))
        {
            var annotation = new PathAnnotation()
                {
                    Content = label,
                    Style = new TextStyle() { Fill = "white" }
                };
            if ((sourceId == "node5" && targetId == "node6") || label == "Yes" || label == "No")
            {
                annotation.Height = 10;
                annotation.Width = 15;
            }
            diagramConnector.Annotations = new DiagramObjectCollection<PathAnnotation>() { annotation };
        }
        diagramConnector.Type = ConnectorSegmentType.Orthogonal;
        connectors.Add(diagramConnector);
    }

    // Method is used to create a Connector for the palette.
    private void CreatePaletteConnector(string id, ConnectorSegmentType type, DecoratorShape decoratorShape)
    {
        Connector diagramConnector = new Connector()
            {
                ID = id,
                Type = type,
                SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
                TargetPoint = new DiagramPoint() { X = 60, Y = 60 },
                Style = new ShapeStyle() { StrokeWidth = 1, StrokeColor = "#757575" },
                TargetDecorator = new DecoratorSettings()
                {
                    Shape = decoratorShape,
                    Style = new ShapeStyle() { StrokeWidth = 1, StrokeColor = "#757575", Fill = "#757575" }
                }
            };
        connectorSymbols.Add(diagramConnector);
    }

    private void UpdateHandle()
    {
        UserHandle deleteHandle = AddHandle("Delete", "delete", Direction.Bottom, 0.5);
        UserHandle drawHandle = AddHandle("Draw", "draw", Direction.Right, 0.5);
        handles.Add(deleteHandle);
        handles.Add(drawHandle);
        selectionSettings.UserHandles = handles;
    }

    private UserHandle AddHandle(string name, string path, Direction direction, double offset)
    {
        UserHandle handle = new UserHandle()
            {
                Name = name,
                Visible = true,
                Offset = offset,
                Side = direction,
                Margin = new DiagramThickness() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
            };
        if (path == "delete")
        {
            handle.PathData = "M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z";
        }
        else
        {
            handle.PathData = "M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z";
        }
        return handle;
    }
}